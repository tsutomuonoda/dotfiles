;; -*- coding: utf-8 -*-
(("unknownplace.org - memo" "just my memo" "http://unknownplace.org/memo/" (20813 17153 658086 499000) feed 0 nil nil ((title nil "unknownplace.org - memo") (link nil "http://unknownplace.org/memo/") (description nil "just my memo") (dc:creator nil "typester") (item nil (title nil "irssiで良い感じにlingrができる irssi-lingr") (link nil "http://unknownplace.org/memo/2013/03/22/1/") (description nil "<p>最近、</p><blockquote><p><a href=\"http://lingr.com/room/perl_jp/\">Perlの話題を日本語で – Lingr</a></p><p>お気軽なかんじで、Perl に関する話題をしましょう。 初心者のかたでも御気軽にPerl の質問など、もりもりしてください♪</p></blockquote><p>というLingrの部屋が盛りあがってる。</p><p>最初はブラウザで見ていたんだけど、だんだんつらくなってきたので、APIを使って<a href=\"http://irssi.org/\">irssi</a>でLingrチャットができるのを作りました。</p><blockquote><p><a href=\"https://github.com/typester/irssi-lingr\">https://github.com/typester/irssi-lingr</a></p></blockquote><p><code>~/.irssi/scripts</code> に置いて、 irssi内から、</p><pre><code>/run lingr
/set lingr_user your_lingr_username
/set lingr_password your_lingr_password
/set lingr_api_key your_api_key  # オプション
/lingr start
</code></pre><p>で <code>lingr/*</code> というwindowができてそこで普通に会話できる。</p><p><a href=\"http://www.flickr.com/photos/typester/8578112735/\" title=\"irssi-lingr by typester, on Flickr\"><img alt=\"irssi-lingr\" height=\"242\" src=\"http://farm9.staticflickr.com/8528/8578112735_55416222c8.jpg\" width=\"369\" /></a></p><p>lingrはtwitterみたいに、<code>@username</code> という形で発言するとその人に通知がいく(iPhoneクライアントだけ？)機能があるので、 その機能を簡単に使えるように、nick補完すると自動的に <code>@</code> を付与する機能も付けておいた。</p><blockquote><p><a href=\"http://unknownplace.org/memo/2012/03/26/1/\">tmux + irssi + canything で Anything 風チャンネル切り替えする</a></p></blockquote><p>で使ってる <code>channel-socket</code> プラグインも、このirssi-lingrのチャンネル郡も切り替えられるようにアップデートしてあるので、もしつかっているひとがいたらアップデートすると良いです。</p>
") (dc:creator nil "typester") (pubDate nil "Fri, 22 Mar 2013 01:20:00 GMT") (category nil "irssi")) (item nil (title nil "clmemoを複数ファイルでやる") (link nil "http://unknownplace.org/memo/2013/03/08/2/") (description nil "<p>SKK導入してて思ったのは、新しい情報がまったくない、ということだ。</p><p>まぁ2013年にもなってSKK導入しようなんて変なやつはいないってのもあるだろうけど、こういうの最近はみんなtwitterとかに流しておわっちゃうっていうパターンが多いからだと思う。 なのでやっぱりこのようにいろいろ作業したことを残すことは重要だなーと思いなおして、先日からやたらエントリが多いわけですw</p><p>それでまぁもっと細目にclmemoつけていくかなーと思ったわけだけど、いま使ってる <code>clmemo.el</code> は、1つのメモファイルしかサポートしていない。 個人的に使うだけだったらそれで十分なんだけど、僕みたいにclmemoをこうして公開してしまっている場合、プライベートなメモもつけられると良い。</p><p>ので、</p><pre><code>(<span class=\"keyword\">defun</span><span class=\"function-name\">clmemo-with-file</span> (memofile)
  (interactive <span class=\"string\">&quot;Fclmemo file: &quot;</span>)
  (<span class=\"keyword\">let</span> ((clmemo-file-name memofile))
    (call-interactively &apos;clmemo)))
</code></pre><p>というような関数を書いた。これを <code>clmemo</code> の代わりに呼びだせば、<code>memofile</code> で指定したファイルが代わりに使われるのでウマー、というわけだ。</p><p>まぁ、いまのところあんまりプライベートなメモってないんだけど、evernoteでやってたタスク管理なども、最近あまりevernoteが信用ならなくなってきたこともあり、Emacsでやろうかなと思ったので、ちょっとそういう感じでプライベートclmemoも運用してみようと思う。</p>
") (dc:creator nil "typester") (pubDate nil "Fri, 08 Mar 2013 01:07:00 GMT") (category nil "emacs, clmemo")) (item nil (title nil "ddskkでも確定キーの挙動をAquaSKKライクに") (link nil "http://unknownplace.org/memo/2013/03/08/1/") (description nil "<p>カナモードからq押さないとひらがなモードに戻れないのは不便なので、AquaSKKと同じように <code>C-j</code> (僕は <code>C-o</code>) で カナ→かな になるようにしたい。</p><p>調べてみると、 <code>skk-rom-kana-rule-list</code> というのに、かな・カナモード用のキーマップがあるので、それに対して自分で修正したバージョンのfuncを <code>skk-kakutei-key</code> に登録してあげれば良いみたいな雰囲気。</p><p>そこで、</p><pre><code>(<span class=\"keyword\">defun</span><span class=\"function-name\">my:skk-kakutei-key</span> (arg)
  (interactive <span class=\"string\">&quot;P&quot;</span>)
  (<span class=\"keyword\">if</span> skk-henkan-mode
      (skk-kakutei arg)
    (skk-j-mode-on)))
</code></pre><p>というような、変換中だったら普通に確定キーとして動くけど、それ以外だったらかなに戻す、という動作をするカスタム関数を定義して、それを、</p><pre><code>(add-to-list &apos;skk-rom-kana-rule-list
     &apos;(skk-kakutei-key nil my:skk-kakutei-key))
</code></pre><p>してあげればOK。 <code>skk-rom-kana-rule-list</code> というのは <code>(require &apos;skk-setup)</code> しただけだとまだないので、 <code>(require &apos;skk-vars)</code> も必要だった。</p><p>最終的な設定はこちら：</p><blockquote><p><a href=\"https://github.com/typester/emacs-config/blob/master/conf/init/init-ddskk.el\">https://github.com/typester/emacs-config/blob/master/conf/init/init-ddskk.el</a></p></blockquote><p>はー、しかしこれで、AquaSKK/uim-skk/ddskk 全部で同じ感じで入力できる環境がようやくできた。 <a href=\"http://podcast.bulknews.net/post/44649386760/podcast-ep4-2013-03-06\">miyagawaさんのpodcast</a>で、yak率という言葉がでてきたけど、SKK導入のyak率は相当なものだなぁ。</p>
") (dc:creator nil "typester") (pubDate nil "Fri, 08 Mar 2013 00:42:00 GMT") (category nil "skk, emacs")) (item nil (title nil "ddskkをやっぱり使う") (link nil "http://unknownplace.org/memo/2013/03/07/2/") (description nil "<p>AquaSKKがEmacs上でも使えるから、ddskkとか使わないなぁと書きましたが、まちがいだった。</p><p><code>C-c C-o</code> のような、キーでも、<code>C-o</code> をAquaSKKにとられてしまうのでだいぶつらい。 なので一度けしたddskkを再度インストール。</p><p>設定はとりあえずこんなかんじで：</p><pre><code>;; key
(define-key global-map (kbd <span class=\"string\">\"C-x C-o\"</span>) <span class=\"warning\">'</span><span class=\"string\">skk-mode)
(setq skk-kakutei-key (kbd \"C-o\"))
(setq mac-pass-control-to-system nil)

;; skkserv
(setq skk-server-host \"127.0.0.1\")
(setq skk-server-portnum 1178)

;; user dic
(setq skk-jisyo-code '</span>utf-8)
(<span class=\"type\">setq</span><span class=\"variable-name\">skk</span>-jisyo (concat (getenv <span class=\"string\">\"HOME\"</span>) <span class=\"string\">\"/Dropbox/skk/skk-jisyo.utf8\"</span>))
</code></pre><p>共有辞書はskkserv経由でAquaSKKをつかう。 ユーザー辞書も文字コードをutf-8にすればAquaSKKと同じものが使える？っぽいのでAquaSKKと同じファイルを指定。 キーも他の環境に併せて <code>C-o</code> に。</p><p>こっちは、uim-skkとちがってユーザー辞書もAquaSKKと同じものが使えるから、学習結果も無駄にならなくて良い感じである。</p><p>唯一、カナモードのときに <code>C-o</code> を押してもひらがなモードに戻らないのが不便。 これはelispフックするかなんかすれば簡単に変更できそうだからそのうち知らべよう。</p>
") (dc:creator nil "typester") (pubDate nil "Thu, 07 Mar 2013 09:30:00 GMT") (category nil "skk, emacs")) (item nil (title nil "SandS") (link nil "http://unknownplace.org/memo/2013/03/07/1/") (description nil "<p>SKK導入してShiftキー酷使してつらいなー、と言っていたら、<a href=\"http://blog.kentarok.org/\">antipop</a>さんに、SandSをおすすめされたので、試してみている。</p><p>MacでSandSするのはKeyRemap4MacBookを使うと簡単だ。</p><blockquote><p><a href=\"http://pqrs.org/macosx/doc/keyboard/\">Mac OS X で SandS (Space and Shift) を使う</a></p></blockquote><p>しかしどうしても手が勝手に小指でshiftキーを押してしまうので、一時的に両サイドのshiftキーは無効になるようにした。</p><p>このSandS、SKKでの日本語入力はまぁすぐに慣れるとおもうが、いままで手に染み込んだショートカットキーはだいぶ苦戦しそうだ。</p><p>例えばEmacsでのundoは、<code>C-_</code> だが、押すキーは <code>C-S--</code> である。 これはなかなか、キーを手で覚えているから、これをスペースにおきかえるということがすぐに思いだせなくて非常に難しい。 こういうのはまぁ無理に矯正しないでもいい気もするが、どうしようかなぁ。</p><p>あとEmacsを使っていると致命的につらいのが <code>M-&lt;</code> である。 MacでSandSで、っていう環境でこの場合押すキーは、<code>Cmd-Space-,</code> だ。おしにくい!</p><p>これはIRCでぼやいていたら、<a href=\"http://handlena.me/\">handlename</a>さんが、「<a href=\"http://d.hatena.ne.jp/rubikitch/20090219/sequential_command\">sequential_command</a>つかってるからM-&lt;とか押さないですよ〜(ﾄﾞﾔｧ」みたいな雰囲気のことを言っていた。 たしかにこれは便利そうなので使ってみよう1</p>
") (dc:creator nil "typester") (pubDate nil "Thu, 07 Mar 2013 01:59:00 GMT") (category nil "skk, emacs")) (item nil (title nil "最近のMacでuim-fep") (link nil "http://unknownplace.org/memo/2013/03/06/3/") (description nil "<p>先ほどのエントリーで、Macだと <code>uim-fep</code> が SEGV してしまう、と書いたが、どうやらこれは gcc の最適化がよくない感じで動いてしまっているようだ。</p><pre><code>$ export CFLAGS=&apos;-g -O0&apos;
$ export CXXFLAGS=$CFLAGS
</code></pre><p>してビルドしたら普通に動くようになった。</p><p>こんな感じで入れた：</p><pre><code>cd /tmp
wget https://uim.googlecode.com/files/uim-1.8.4.tar.gz
cd uim-1.8.4

export CFLAGS=&apos;-g -O0&apos;
export CXXFLAGS=$CFLAGS
./configure --prefix=$(brew --prefix)/Cellar/uim/1.8.4 --without-x
make
make install
brew link uim
</code></pre><p>アドホックな対応だけど、これでまぁいちおう手元のターミナルでも日本語入力がOKになった。</p><p>あとは学習辞書をAquaSKKと共有したいな〜。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 06 Mar 2013 13:11:00 GMT") (category nil "skk")) (item nil (title nil "uim-skkでC-jでもカナからひらがなへ戻れるようにカスタマイズ") (link nil "http://unknownplace.org/memo/2013/03/06/2/") (description nil "<p>AquaSKKとuim-skkを併用していて、<code>C-j</code> キー (僕は <code>C-o</code> に変更してるが) の扱いの違いが若干気になった。</p><p>AquaSKKでは基本的に、<code>C-j</code>を押せば、常にひらがな入力モードになる。</p><p>一方uim-skkは、<code>q</code> を押してカタカナモードになっている状態で <code>C-j</code> を押してもなにも反応しない。また、カタカナモードから英数モードに移行したあとで、再度 <code>C-j</code> を押すとカタカナモードに復帰してしまう。 ひらかなモードに戻るには再度 <code>q</code> でトグルさせてあげる必要があるみたい。</p><p>好みの問題かもしれないが、僕は AquaSKK の挙動のほうが好きなので、uim-skkもそれにあわせることにする。</p><p>しかし不幸なことに、uim-skkのドキュメントにそのように設定する項目が見当らなかったので、以下のようにアドホックにコードを変更した。</p><pre><code>--- /usr/share/uim/skk.scm.orig 2013-03-06 19:12:01.994615339 +0900
+++ /usr/share/uim/skk.scm      2013-03-06 19:16:07.314888197 +0900
@@ -937,6 +937,11 @@
          (skk-return-key? key key-state))
       (skk-commit-raw sc key key-state)
       #f)
+     ((skk-on-key? key key-state)
+      (skk-context-set-state! sc &apos;skk-state-direct)
+      (skk-context-set-kana-mode! sc skk-type-hiragana)
+      (rk-flush rkc)
+      #f)
      ((skk-wide-latin-key? key key-state)
       (skk-context-set-state! sc &apos;skk-state-wide-latin)
       (rk-flush rkc)
</code></pre><p>あってるかわからないが、とりあえずこれで希望通りの動作になっているっぽい。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 06 Mar 2013 10:17:00 GMT") (category nil "skk")) (item nil (title nil "ATOKをやめてSKKを使いはじめた") (link nil "http://unknownplace.org/memo/2013/03/06/1/") (description nil "<p>ATOKをMacを使いはじめてからずっと使っているので、そこそこ長い付き合いではあるけれど、 和英混在入力の使い勝手が悪く、いつも混在入力をするときに、ATOK自体のON/OFFをして対応してしまっていた。</p><p>この使い方は注意しないと、変な文節を学習させてしまうことになる。</p><p>例えば、</p><blockquote><p>nodeよりperlが好き。</p></blockquote><p>のような文章で、英語の部分ではATOKをOFFにするような入力をしていると、 「が好き」という文章をATOKに教えこませてしまう。このような意図しない学習結果が積みかさなると、普通の文章の変換も苦になるほどATOKの調子が悪くなってしまう。</p><p>そのような状態になるたびに、辞書をクリアしたり、 そもそもこのようなことを避けるために、「が」で一旦確定させるクセをつけるなどして、対応してきたが、そんなことを考えながら文章かくのであれば、もっとシンプルな、SKKのような入力方法にしちゃえばいいのではないかなーということで、とりあえず試してみることにした。</p><h4>SKK入門</h4><p>最初のとっかかりは、<a href=\"http://d.hatena.ne.jp/tomoya/20101212/1292089972\">Emacsのddskkというのについてくるチュートリアルが良い</a>、とのことなので、まずMacシステムの入力メソッドはそのままにEmacs内だけでSKKを試してみる。</p><p>それを一通り終えて、SKKの使い方が分かったところで、Mac全体でもSKKが使えるように<a href=\"http://aquaskk.sourceforge.jp/\">AquaSKK</a>をインストール。</p><p>試してみたところEmacs内でもAquaSKKが使えるっぽいので、ddskkは別に使わなくてもいいかなーという感じで、チュートリアルそうそう、ddskkは使わなくなってしまった。 AquaSKKは、Enterで改行しない、というデフォルトで有効になっている余計なオプションを外してしまえば、あとは大体ddskkと同じような使い勝手のようだ。(SKKに詳しい人から見るといろいろ違うのかもしれないが)</p><p>入力方法自体はいたってシンプルで、すぐに覚えられる。 「困った」みたいのの変換が、まだちょっと考えないと入力できないが、まぁすぐに慣れるだろう。</p><p>しかしそれ以外にもいろいろ問題があった。</p><h4>問題1. C-j がつらい</h4><p>SKKは <code>C-j</code> を変換確定やら日本語モードへの移行やらに使用する、言ってしまえば、SKKのメインキーである。</p><p>しかし僕はこれを改行とか、elispの評価とかに使用するのが手に染みついてしまっていて、このキーをSKKで使用するのは苦痛を伴なう。</p><p>この際だし、矯正してしまってもいいかなーともおもってしばらくがんばったが、どうにもだめなので、SKKの該当キーを <code>C-o</code> に変更した。</p><p>AquaSKKのキー設定を変更するには、<code>/Library/Input Methods/AquaSKK.app/Contents/Resources/keymap.conf</code> を <code>/Users/typester/Library/Application Support/AquaSKK/keymap.conf</code> にコピーして、その中の、<code>SKK_JMODE</code> というところを</p><pre><code>SKK_JMODE       ctrl::o
</code></pre><p>みたいな感じに修正すれば良い。</p><h4>問題2. ターミナルで入力できない</h4><p>入力できない、というか <code>C-o</code> が効かない。ので日本語に復帰できない。(<code>C-j</code>に戻してもだめだった)</p><p><code>uim-fep</code> いれろ、みたいのを見て、ウンザリしつつもインストールしたが、しばらく使っていると高確率でSEGVするのでまともに使えなかったためさらにウンザリ。</p><p>これはMacだけの現象かなーと思ってLinuxで試してみると、Linuxではうまく動いた。</p><p>ただ、日常的にターミナルで日本語入力をする場面を考えてみると、IRCをするirssiだけ。 しかも、irssiを動かしているサーバーはLinuxなので、そこにuim-fepをいれてしのぐことにした。</p><p>uim-skk でも、以下のような設定で AquaSKK と同じように <code>C-j</code> を <code>C-o</code> に置きかえた。</p><pre><code># ~/.uim
(define-key skk-on-key? <span class=\"warning\">'</span><span class=\"string\">(\"&lt;Control&gt;o\"))
(define-key skk-commit-key? '</span>(<span class=\"string\">\"&lt;Control&gt;o\"</span>))
(define-key skk-state-direct-no-preedit-nop-key? <span class=\"warning\">'</span><span class=\"string\">(\"&lt;Control&gt;o\"))
</span></code></pre><p>ユーザー辞書をDropboxかなにかで同期できたらいいなーとおもったが、 AquaSKKのユーザー辞書は utf-8、uim-skk のそれは euc-jp と、文字コードが違い、しかもそれを変更する方法がわからなかったので、とりあえず別々の学習になってしまってもいいか〜ってなってる。</p><h4>問題3. ひらかなの小文字入力</h4><p>いままでずっと「la」で「ぁ」というように <code>l</code> キーで小文字入力していたが、SKKではこのキーは英字入力への切り替えキーなので使うことができない。 これもキー設定をかえてもよかったが、ここは <code>x</code> を使うように矯正する方向でがんばる。</p><h4>使用感</h4><p>送り仮名を意識しないといけなかったり、その送り仮名が「っ」だったりするときの入力はまだまだ慣れなくて難しい。 慣れてもイメージとして、ATOKほど高速に日本語入力ができる感じはない。ATOKはやっぱり賢いのでガーーっと長文を一気に入力して一発変換という使い方をしても精度が高く、日本語だけを入力する分にはやはり最高の入力メソッドであると思う。</p><p>SKKのいいところは仕組みがシンプルなことと、実装がいっぱいあってどこでも動くところかな。</p><p>シンプルなので自分でコントロールできると思う。ATOKは学習がおかしくなってしまったらもう途方にくれるしかなかった。実装がいっぱいあるのも、AquaSKKがなくなってもEmacsがあれば大丈夫、みたいな安心感はある。</p><p>入力速度に関しては、Shiftキーを非常に多用するので、親指Shiftとかを導入したらもう少し高速に入力できるようになるのだろうかなー。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 06 Mar 2013 07:32:00 GMT") (category nil "life, skk")) (item nil (title nil "plenv の Perl バージョンを取得する zsh スクリプト") (link nil "http://unknownplace.org/memo/2013/01/24/1/") (description nil "<p><a href=\"http://blog.64p.org/entry/2013/01/21/134639\">plenv</a> でつかわれる Perl をプロンプトに表示したりするのに使えるかと。検出ロジックは plenv とおなじつもり。</p><pre><code><span class=\"function-name\">plenv_perl_version</span>() {
    <span class=\"type\">local</span><span class=\"variable-name\">dir</span>=$PWD

    [[ -n $PLENV_VERSION ]] &amp;&amp; { echo $PLENV_VERSION; <span class=\"keyword\">return</span> }

    <span class=\"keyword\">while</span> [[ -n $dir &amp;&amp; $dir != <span class=\"string\">\"/\"</span> &amp;&amp; $dir != <span class=\"string\">\".\"</span> ]]; <span class=\"keyword\">do</span><span class=\"keyword\">if</span> [[ -f <span class=\"string\">\"$dir/.perl-version\"</span> ]]; <span class=\"type\">then</span><span class=\"variable-name\">head</span> -n 1 <span class=\"string\">\"$dir/.perl-version\"</span><span class=\"keyword\">return</span>
        fi
        dir=$dir:h
    done

    local plenv_home=$PLENV_HOME
    [[ -z $PLENV_HOME &amp;&amp; -n $HOME ]] &amp;&amp; plenv_home=<span class=\"string\">\"$HOME/.plenv\"</span><span class=\"keyword\">if</span> [[ -f <span class=\"string\">\"$plenv_home/version\"</span> ]]; <span class=\"type\">then</span><span class=\"variable-name\">head</span> -n 1 <span class=\"string\">\"$plenv_home/version\"</span>
    fi
}
</code></pre><p><code>dir=$dir:h</code> とかしてるので zsh でしか動かないと思う。</p><p>しかし、書くのにだいぶ時間かかった。。</p>
") (dc:creator nil "typester") (pubDate nil "Thu, 24 Jan 2013 00:32:00 GMT") (category nil "zsh")) (item nil (title nil "plenv が良い感じ") (link nil "http://unknownplace.org/memo/2013/01/23/1/") (description nil "<p>perlbrew 使ってたんだけど、tokuhirom がつくってる <a href=\"http://blog.64p.org/entry/2013/01/21/134639\">plenv</a> にスイッチした。</p><p>perlbrew よりシンプルでなにやってるかわかるのがなにより。 というか perlbrew がよく分からなすぎるという話もある。</p><p>plenv だとさらに <code>.perl-version</code> というファイルに perl のバージョンをいれておくと、そのディレクトリ以下では自動的にそのバージョンの perl が使われるという機能があって、これがだいぶはかどる。</p><p>perlbrew で入れた各種 perl は <code>-g</code> つけわすれて SEGV したときこまってて別途 <code>--as=5.14.2-debug</code> みたいのをつくってたけど、 その経験を生かして今度は最初から</p><pre><code>$ plenv install 5.14.2 -D=DEBUGGING=-g
</code></pre><p>な感じで全部入れるようにした。ちなみにこの install オプションはまだドキュメントになってないのでまだ変わるかもしれないから、この記述は参考にしないようおねがいいたす。</p><p>perlbrew と比べるといったんラッパーをかます分 bootstrap が遅いというのがあって、 flymake とかだと結構気になるけど、 perl のバージョン検出の仕組みはシンプルだから elisp でかき直すのもすぐできそう。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 23 Jan 2013 02:36:00 GMT") (category nil "perl")) (item nil (title nil "Emacsの設定を見直し、 el-get の distributed セットアップに統一") (link nil "http://unknownplace.org/memo/2013/01/21/1/") (description nil "<p>いままで<a href=\"https://github.com/typester/emacs-config-old\">秘伝のタレのような設定</a>を使い続けていたのだが、どうもしばらく使っているとEmacsがCPUを非常に食うようになってくる。 flymakeの設定かなー？とかほかにもいろいろ怪しげなところを削ってみたりしたがわからず、だましだまし使っていた。</p><p>そういう理由もあってEmacs設定をリセットしたいと思っていたので、<a href=\"http://amzn.to/10wxFU8\">Emacs実践入門</a>や Advent Calendar を読んでいたら <a href=\"https://github.com/dimitri/el-get\">el-get</a> というパッケージマネージャがなかなかよさそうだと思った。</p><p>これ、存在自体はまえから知っていたけど秘伝のタレベースな自分は使わないだろうなーとスルーしていた物だが、 ドキュメント(info)を読んでみると思った以上によさげだと言うことが分かった。 Mac 使ってる人にわかりやすくいうなら Emacs 用の homebrew という感じ。</p><p>なかでも <code>6.3 Distributed Setup</code> で紹介されてる方法を使うと、他の環境に設定を持って行ったときも初回起動時にパッケージをよしなにインストールしてくれて自動的に同じ環境にしてくれる。これはなかなか便利。</p><p>というわけで作り直した設定がこちら、まだ perl と clmemo 周りの最小限の設定しかないけれども。</p><blockquote><p><a href=\"https://github.com/typester/emacs-config\">https://github.com/typester/emacs-config</a></p></blockquote><p><code>~/.emacs.d/</code> 以下に置かなくても動くようにつくってあるので、</p><pre><code>$ git clone git://github.com/typester/emacs-config.git

# no-window の場合
$ emacs -q -l emacs-config/init.el

# Cocoa の場合
$ /Applications/Emacs.app/Contents/MacOS/Emacs -q -l emacs-config/init.el
</code></pre><p>とするともりもりパッケージのセットアップが始まって（時間はかかるけど）僕と同じ設定で Emacs を試せる状態になるはず。</p><p>Emacs24 前提と、 el-get のために git コマンドが <code>exec-path</code> に必要。</p><p>このように非常にカジュアルに人の設定を試せるのはかなり革命的。 （もちろん複数の環境で設定を同期するのにも革命的）</p><p>なのでみんながこれ前提でセットアップしてくれたら最高だなーと思いますのでこれを読んでる Emacs ユーザーの方々におかれましては el-get ベースな設定を一考していただければ幸いでございます。</p>
") (dc:creator nil "typester") (pubDate nil "Mon, 21 Jan 2013 04:08:00 GMT") (category nil "emacs")) (item nil (title nil "MacでのBluetoothホストコントロールデバイスの優先順位の変更") (link nil "http://unknownplace.org/memo/2013/01/16/1/") (description nil "<p>毎回ググるのでメモ。</p><p>OSX は USBのドングルとかBluetoothホストコントローラとかをつけたときの挙動を、ファームウェアの NVRAM ってところに <code>bluetoothHostControllerSwitchBehavior</code> というキーで値を設定してあげることによって以下の3種類のうちから決めることができる。</p><ul><li><code>never</code>: 外付けのホストコントローラにスイッチせず、つねにビルドインコントローラを使う</li><li><code>always</code>: ビルドインコントローラからdetachして外付けのホストコントローラにスイッチする</li><li><code>default</code>: 外付けホストコントローラがApple以外のときはビルドインからdetachして外付けデバイスを使う</li></ul><p>デフォルトはもちろん <code>default</code>。</p><p>で、 BT4LE に対応したドングルを持っていれば、BT4積んでない昔の MacBook なんかでも CoreBluetooth つかったり開発したりできる。</p><p>さらに、あえてここで <code>never</code> を設定して外付けのホストコントローラを使わない設定にすると、 余っている外付けホストコントローラを iOS Simulator から利用することができる。</p><p>この設定を変えるには <code>nvram</code> ってコマンドを使う:</p><pre><code>$ sudo nvram bluetoothHostControllerSwitchBehavior=<span class=\"string\">\"never\"</span></code></pre><p>とかでOK。</p><p>詳しくは</p><blockquote><p><a href=\"http://developer.apple.com/library/ios/#technotes/tn2295/_index.html\">Technical Note TN2295: Testing Core Bluetooth Applications in the iOS Simulator</a></p></blockquote><p>参照。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 16 Jan 2013 03:30:00 GMT") (category nil "osx")) (item nil (title nil "Any::Moose とか幻想やったんや") (link nil "http://unknownplace.org/memo/2012/12/25/1/") (description nil "<p><code>Any::Moose</code> は <code>Moose</code> と <code>Mouse</code> のラッパーで、バックエンドがどちらになるかは <code>use Any::Moose</code> した時点で <code>Moose</code> or <code>Mouse</code> がロードされているかによって変わる。</p><p>どこかで <code>use Moose</code> していたら <code>use Any::Moose</code> は <code>use Moose</code> としてうごくし、 そうじゃない場合は <code>use Mouse</code> としてうごく。</p><p>これはなんのためにあるかというと、MouseとMooseの両方のモジュールを混ぜて使うと壊れるからなんだけど、 そもそも混ぜて使って問題になるのは Mouse のクラスを Moose で extends したりとか、そういう Moose 周りの機能を相互に使おうとした場合だけであって、混ぜて使っていてもそれぞれのクラスを普通に使い合う分にはなんの問題もない。</p><p>また、昔はruntimeの速度にそこまで性能差はなかったということもある。(<code>make_immutable</code> してたら Moose もそこまで遅くない)</p><p>しかし現在では gfx マジックによって Mouse は激しく高速化されており、runtime での速度差もかなりある。 したがって、Moose的な意味で相互利用する場合でなければ、<code>Any::Moose</code> が勝手に Moose になるとうれしくない場合がほとんどだ。</p><p>さらに、MooseとMouseの非互換によって、バックエンドがMouseのときはうまく動いていたコードが、 どこからMooseモジュールを使用したことによってバックエンドがMooseに切り替わった瞬間に動かなくなるという事例もある。</p><p>結論として <code>Any::Moose</code> つかわないで <code>Mouse</code> を直で使う、で誰も困らないなーとおもってるのでそうしていこうと考えております。</p><p>もし混ぜることがあったとしても Moose からつかうときは non Moose なクラスとして扱うようにすれば別に問題ないでしょう。(僕はそもそもMoose使わないけどw)</p>
") (dc:creator nil "typester") (pubDate nil "Tue, 25 Dec 2012 02:02:00 GMT") (category nil "perl")) (item nil (title nil "Redis布教活動報告 ISUCON 編") (link nil "http://unknownplace.org/memo/2012/11/07/1/") (description nil "<p>最近 <code>Test::RedisServer</code> とかもろもろつくっててばれてるかもしれませんが、だいぶ Redis 期にありまして、最近の趣味は？っていう問いにはだいたいRedisのソースを読むことですってなくらいなのですが、 memcached とかシンプルな KVS と比べるとだいぶ機能が豊富なので使い方を迷ったりとかそういう事例もあり、周りにもう少し使える人を増やさなければ僕の書いたコードが属人化しててつらい感じになるなーっていうわけで、 布教活動をおこなっておりまして、その一環として ISUCON2 に参加してきましたのでその報告です。</p><blockquote><p><a href=\"http://blog.livedoor.jp/techblog/archives/67726489.html\">livedoor Techブログ : #isucon2 リアルタイムフォトレポート 更新終了</a></p></blockquote><p>前回の優勝チームに混ぜてもらった感じでだいぶついてる感じもしますが、見事連覇を果たせ、懇親会でも redis redis と連呼してきたのでだいぶ興味持った方も多いのではないでしょうか！</p><p>そんな布教活動視点から ISUCON を振り返ってみたいと思います。</p><h4>Redis がつかえるかどうか</h4><p>開始直後はチーム間でのコンフリクトをさけるために <code>git push</code> で rev サーバーに反映ってのだけは設定しましたが、そのあとはすぐボトルネックそうなところで Redis に置き換えられる物はないか探していました。</p><p>すぐに購入トランザクションが見つかります。Redis には Set 型という集合を表す型があり、それを使うと集合のなかから排他的に一つランダムでとりだして消すというのをとても効率的に実装することができます。 ISUCON ではこのランダム条件が（チェッカーがバグでスルーしていたみたいですけど）なかなかきびしかったところだと思いますが、そこもするっと解決です。 なお、順番に購入という条件であれば双方向リストの List 型を使うのが正解でしょう。こちらも先頭or末尾からの取得＆削除を排他的に行うことができます。</p><p>ついでに購入履歴も Redis にもたせておけばそこから、サイドバー(<code>recent_sold</code>)とCSV吐き出しもどちらも行えそうだなと思いました。</p><p>ここまででとりあえずこの購入トランザクションだけでも Redis にうつしたら DB ロックする必要がないのでだいぶ良さそうだなと思い、redisブランチやりますとチームに宣言します。</p><h4>書き換えの流れ</h4><p>そしてもりもり書き換えました。</p><ul><li><code>POST /admin</code> でMySQLにデータを流し込んだあとに stock のデータをすべて redis にコピーする。(<code>stock:{variation_id}</code> というキーのSet)</li><li><code>POST /buy</code> で対象の Set から一つ取り出し、<code>order_history</code> という List にアーティスト名などの付属情報込みな辞書情報をPush。</li><li>サイドバーは <code>order_history</code> から最新10件を取得するように変更</li><li>CSV書き出しは <code>order_history</code> をまるっと書き出す感じ</li><li>その他もろもろテンプレに渡してるデータをよしなに変更</li></ul><p>といった感じですが、アプリのテストコードがないのでだいぶ変更が手探りな感じでつらかったです。とくにテンプレ周り。なおしてベンチ止まって、ベンチのエラー見て修正という…。 そんなつらいかんじや実際の作業内容は <a href=\"https://github.com/kayac/isucon2/commits/redis\">redis ブランチのコミットログ</a>を参照いただくと分かるかなと思います。</p><h4>他になんかあるか？</h4><p>コード見てるだけだとわからなかったので fujiwara さんにボトルネック探してもらいつつ、自分はとくにやることもないので非同期の実装を模索しておりました。 この時点ではforkモデルの限界なんじゃなかろうかと思っていて非同期にしてベンチ取ってみるか、みたいな感じでしたが、Perlで非同期にすると書き直しになるし、nodeの実装いじっててもうまく動かなくてすぐにあきらめてしまったんですが、それは fujiwara さんがテンプレのレンダリングボトルネックを見つけてくれて、そちらを直したら今までのアプリでも十分スループット（reverse proxy &lt;-&gt; app 間）が出ており、非同期全然意味ありませんでした。</p><p>まぁそうだよね、IOウェイトが問題になるような場合以外は非同期意味ないなーとそのとき思った次第です。</p><h4>テンプレキャッシュ</h4><p>組長が見つけてくれたチケットの座席表のレンダリングのボトルネック。これも Redis でキャッシュするようにしました。 Redis は単純なKVSとしてみても十分高速なのでこういう用途にも使えます。</p><h4>データ永続化</h4><p>これは本家ドキュメントよくまとまっております。</p><blockquote><p><a href=\"http://redis.io/topics/persistence\">http://redis.io/topics/persistence</a></p></blockquote><p>スナップショット(dump)と追記ログ(appendlog - MySQLのbinlog的な)の二種類の永続化方法があり、dumpはバックアップ用、復元をappendlogから、ってのがオススメな方法。</p><p>appendlog は基本的にはプロトコルログなんですが、大きくなるとバックグラウンドで最適化されて小さくなります。デフォルトでは fsync が1秒ごとに走るので最悪そこまでのデータは保全される。 書き込み毎に sync って言うのも設定でできますがパフォーマンス的につらいことになるでしょう。</p><p>これがISUCONのレギュレーションを満たしているかは定かではありませんがとりあえず fujiwara 組では1秒fsyncなappendlogでデータ永続化をしました。</p><p>また、メモリいっぱい使い切っているような大きなデータセットの場合に appendlog するは不安感ありますが、自分もまだ試したことがないので、近いうちに試したいと思っております。</p><h4>まとめ</h4><p>あんまりおすすめしまくっていると勘違いしちゃう人もいるかもしれないのでいちおう補足しておきますが、単純に MySQL を Redis に置き換えたら速くなる、っていうことはないです。 MySQLがいいところ、Redisがいいところ、（もちろんその他のツールも）どちらもあるので、 Pros and Cons やトレードオフを考えた上で選択するのが大事です。</p><p>僕自身も Redis つかっているといっても運用上のノウハウなどまだまだうちも足りていないのでそこはこれから精進していきたいと思います。</p><p>しかし、ISUCON楽しいですね。 #isucon のログによると</p><pre><code>11:47 &lt; typester&gt; すでにだいぶたのしい
</code></pre><p>といっており、ここからずーーーっと終了までたのしかったですね。</p><p>あと珈琲ありがとうございました！</p><h4>番外: Xslate の速さを実感</h4><p>家帰って他の言語の実装をうごかしてみると、明らかに座席表のレンダリングが遅いんです。ブラウザで見てボトルネックって分かるレベル。 でも、Perl の実装をブラウザで見た人はあのページの遅さはテンプレートエンジンじゃなくてブラウザがレンダリングするのに時間かかってる、くらいにしか感じない気がする。 今回の罠は Xslate の速さと言っても良いのではないでしょうか。</p><p>これは gfx++ といわざるを得ませんね！</p>
") (dc:creator nil "typester") (pubDate nil "Tue, 06 Nov 2012 23:46:00 GMT") (category nil "isucon, life, redis")) (item nil (title nil "コマンドラインでネットワーク設定のネットワーク環境のところを変える") (link nil "http://unknownplace.org/memo/2012/10/31/1/") (description nil "<p>ネットワーク周りの設定は <code>networksetup</code> コマンドでいろいろできるみたいで、 man をみるとどうも環境設定でできることはほとんどここからもできる模様。</p><p>んで、ネットワーク環境というのは</p><pre><code>-listlocations
        List all network locations.

-getcurrentlocation
        Display the name of the current set.

-createlocation location [populate]
        Create a set with the user-defined-name name and optionally populate it with the default services.

-deletelocation location
        Delete the set.

-switchtolocation location
        Make the specified set the current set.
</code></pre><p>この辺が該当するようだ、切り替えるだけなら</p><pre><code>$ networksetup -switchtolocation Hoge
</code></pre><p>で OK。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 31 Oct 2012 01:35:00 GMT") (category nil "osx")))) ("irssiで良い感じにlingrができる irssi-lingr" "<p>最近、</p><blockquote><p><a href=\"http://lingr.com/room/perl_jp/\">Perlの話題を日本語で – Lingr</a></p><p>お気軽なかんじで、Perl に関する話題をしましょう。 初心者のかたでも御気軽にPerl の質問など、もりもりしてください♪</p></blockquote><p>というLingrの部屋が盛りあがってる。</p><p>最初はブラウザで見ていたんだけど、だんだんつらくなってきたので、APIを使って<a href=\"http://irssi.org/\">irssi</a>でLingrチャットができるのを作りました。</p><blockquote><p><a href=\"https://github.com/typester/irssi-lingr\">https://github.com/typester/irssi-lingr</a></p></blockquote><p><code>~/.irssi/scripts</code> に置いて、 irssi内から、</p><pre><code>/run lingr
/set lingr_user your_lingr_username
/set lingr_password your_lingr_password
/set lingr_api_key your_api_key  # オプション
/lingr start
</code></pre><p>で <code>lingr/*</code> というwindowができてそこで普通に会話できる。</p><p><a href=\"http://www.flickr.com/photos/typester/8578112735/\" title=\"irssi-lingr by typester, on Flickr\"><img alt=\"irssi-lingr\" height=\"242\" src=\"http://farm9.staticflickr.com/8528/8578112735_55416222c8.jpg\" width=\"369\" /></a></p><p>lingrはtwitterみたいに、<code>@username</code> という形で発言するとその人に通知がいく(iPhoneクライアントだけ？)機能があるので、 その機能を簡単に使えるように、nick補完すると自動的に <code>@</code> を付与する機能も付けておいた。</p><blockquote><p><a href=\"http://unknownplace.org/memo/2012/03/26/1/\">tmux + irssi + canything で Anything 風チャンネル切り替えする</a></p></blockquote><p>で使ってる <code>channel-socket</code> プラグインも、このirssi-lingrのチャンネル郡も切り替えられるようにアップデートしてあるので、もしつかっているひとがいたらアップデートすると良いです。</p>" "http://unknownplace.org/memo/2013/03/22/1/" (20811 45504) new 1 nil nil ((title nil "irssiで良い感じにlingrができる irssi-lingr") (link nil "http://unknownplace.org/memo/2013/03/22/1/") (description nil "<p>最近、</p><blockquote><p><a href=\"http://lingr.com/room/perl_jp/\">Perlの話題を日本語で – Lingr</a></p><p>お気軽なかんじで、Perl に関する話題をしましょう。 初心者のかたでも御気軽にPerl の質問など、もりもりしてください♪</p></blockquote><p>というLingrの部屋が盛りあがってる。</p><p>最初はブラウザで見ていたんだけど、だんだんつらくなってきたので、APIを使って<a href=\"http://irssi.org/\">irssi</a>でLingrチャットができるのを作りました。</p><blockquote><p><a href=\"https://github.com/typester/irssi-lingr\">https://github.com/typester/irssi-lingr</a></p></blockquote><p><code>~/.irssi/scripts</code> に置いて、 irssi内から、</p><pre><code>/run lingr
/set lingr_user your_lingr_username
/set lingr_password your_lingr_password
/set lingr_api_key your_api_key  # オプション
/lingr start
</code></pre><p>で <code>lingr/*</code> というwindowができてそこで普通に会話できる。</p><p><a href=\"http://www.flickr.com/photos/typester/8578112735/\" title=\"irssi-lingr by typester, on Flickr\"><img alt=\"irssi-lingr\" height=\"242\" src=\"http://farm9.staticflickr.com/8528/8578112735_55416222c8.jpg\" width=\"369\" /></a></p><p>lingrはtwitterみたいに、<code>@username</code> という形で発言するとその人に通知がいく(iPhoneクライアントだけ？)機能があるので、 その機能を簡単に使えるように、nick補完すると自動的に <code>@</code> を付与する機能も付けておいた。</p><blockquote><p><a href=\"http://unknownplace.org/memo/2012/03/26/1/\">tmux + irssi + canything で Anything 風チャンネル切り替えする</a></p></blockquote><p>で使ってる <code>channel-socket</code> プラグインも、このirssi-lingrのチャンネル郡も切り替えられるようにアップデートしてあるので、もしつかっているひとがいたらアップデートすると良いです。</p>
") (dc:creator nil "typester") (pubDate nil "Fri, 22 Mar 2013 01:20:00 GMT") (category nil "irssi"))) ("clmemoを複数ファイルでやる" "<p>SKK導入してて思ったのは、新しい情報がまったくない、ということだ。</p><p>まぁ2013年にもなってSKK導入しようなんて変なやつはいないってのもあるだろうけど、こういうの最近はみんなtwitterとかに流しておわっちゃうっていうパターンが多いからだと思う。 なのでやっぱりこのようにいろいろ作業したことを残すことは重要だなーと思いなおして、先日からやたらエントリが多いわけですw</p><p>それでまぁもっと細目にclmemoつけていくかなーと思ったわけだけど、いま使ってる <code>clmemo.el</code> は、1つのメモファイルしかサポートしていない。 個人的に使うだけだったらそれで十分なんだけど、僕みたいにclmemoをこうして公開してしまっている場合、プライベートなメモもつけられると良い。</p><p>ので、</p><pre><code>(<span class=\"keyword\">defun</span><span class=\"function-name\">clmemo-with-file</span> (memofile)
(interactive <span class=\"string\">&quot;Fclmemo file: &quot;</span>)
(<span class=\"keyword\">let</span> ((clmemo-file-name memofile))
(call-interactively &apos;clmemo)))
</code></pre><p>というような関数を書いた。これを <code>clmemo</code> の代わりに呼びだせば、<code>memofile</code> で指定したファイルが代わりに使われるのでウマー、というわけだ。</p><p>まぁ、いまのところあんまりプライベートなメモってないんだけど、evernoteでやってたタスク管理なども、最近あまりevernoteが信用ならなくなってきたこともあり、Emacsでやろうかなと思ったので、ちょっとそういう感じでプライベートclmemoも運用してみようと思う。</p>" "http://unknownplace.org/memo/2013/03/08/2/" (20793 14772) new 2 nil nil ((title nil "clmemoを複数ファイルでやる") (link nil "http://unknownplace.org/memo/2013/03/08/2/") (description nil "<p>SKK導入してて思ったのは、新しい情報がまったくない、ということだ。</p><p>まぁ2013年にもなってSKK導入しようなんて変なやつはいないってのもあるだろうけど、こういうの最近はみんなtwitterとかに流しておわっちゃうっていうパターンが多いからだと思う。 なのでやっぱりこのようにいろいろ作業したことを残すことは重要だなーと思いなおして、先日からやたらエントリが多いわけですw</p><p>それでまぁもっと細目にclmemoつけていくかなーと思ったわけだけど、いま使ってる <code>clmemo.el</code> は、1つのメモファイルしかサポートしていない。 個人的に使うだけだったらそれで十分なんだけど、僕みたいにclmemoをこうして公開してしまっている場合、プライベートなメモもつけられると良い。</p><p>ので、</p><pre><code>(<span class=\"keyword\">defun</span><span class=\"function-name\">clmemo-with-file</span> (memofile)
  (interactive <span class=\"string\">&quot;Fclmemo file: &quot;</span>)
  (<span class=\"keyword\">let</span> ((clmemo-file-name memofile))
    (call-interactively &apos;clmemo)))
</code></pre><p>というような関数を書いた。これを <code>clmemo</code> の代わりに呼びだせば、<code>memofile</code> で指定したファイルが代わりに使われるのでウマー、というわけだ。</p><p>まぁ、いまのところあんまりプライベートなメモってないんだけど、evernoteでやってたタスク管理なども、最近あまりevernoteが信用ならなくなってきたこともあり、Emacsでやろうかなと思ったので、ちょっとそういう感じでプライベートclmemoも運用してみようと思う。</p>
") (dc:creator nil "typester") (pubDate nil "Fri, 08 Mar 2013 01:07:00 GMT") (category nil "emacs, clmemo"))) ("ddskkでも確定キーの挙動をAquaSKKライクに" "<p>カナモードからq押さないとひらがなモードに戻れないのは不便なので、AquaSKKと同じように <code>C-j</code> (僕は <code>C-o</code>) で カナ→かな になるようにしたい。</p><p>調べてみると、 <code>skk-rom-kana-rule-list</code> というのに、かな・カナモード用のキーマップがあるので、それに対して自分で修正したバージョンのfuncを <code>skk-kakutei-key</code> に登録してあげれば良いみたいな雰囲気。</p><p>そこで、</p><pre><code>(<span class=\"keyword\">defun</span><span class=\"function-name\">my:skk-kakutei-key</span> (arg)
(interactive <span class=\"string\">&quot;P&quot;</span>)
(<span class=\"keyword\">if</span> skk-henkan-mode
(skk-kakutei arg)
(skk-j-mode-on)))
</code></pre><p>というような、変換中だったら普通に確定キーとして動くけど、それ以外だったらかなに戻す、という動作をするカスタム関数を定義して、それを、</p><pre><code>(add-to-list &apos;skk-rom-kana-rule-list
&apos;(skk-kakutei-key nil my:skk-kakutei-key))
</code></pre><p>してあげればOK。 <code>skk-rom-kana-rule-list</code> というのは <code>(require &apos;skk-setup)</code> しただけだとまだないので、 <code>(require &apos;skk-vars)</code> も必要だった。</p><p>最終的な設定はこちら：</p><blockquote><p><a href=\"https://github.com/typester/emacs-config/blob/master/conf/init/init-ddskk.el\">https://github.com/typester/emacs-config/blob/master/conf/init/init-ddskk.el</a></p></blockquote><p>はー、しかしこれで、AquaSKK/uim-skk/ddskk 全部で同じ感じで入力できる環境がようやくできた。 <a href=\"http://podcast.bulknews.net/post/44649386760/podcast-ep4-2013-03-06\">miyagawaさんのpodcast</a>で、yak率という言葉がでてきたけど、SKK導入のyak率は相当なものだなぁ。</p>" "http://unknownplace.org/memo/2013/03/08/1/" (20793 13272) new 3 nil nil ((title nil "ddskkでも確定キーの挙動をAquaSKKライクに") (link nil "http://unknownplace.org/memo/2013/03/08/1/") (description nil "<p>カナモードからq押さないとひらがなモードに戻れないのは不便なので、AquaSKKと同じように <code>C-j</code> (僕は <code>C-o</code>) で カナ→かな になるようにしたい。</p><p>調べてみると、 <code>skk-rom-kana-rule-list</code> というのに、かな・カナモード用のキーマップがあるので、それに対して自分で修正したバージョンのfuncを <code>skk-kakutei-key</code> に登録してあげれば良いみたいな雰囲気。</p><p>そこで、</p><pre><code>(<span class=\"keyword\">defun</span><span class=\"function-name\">my:skk-kakutei-key</span> (arg)
  (interactive <span class=\"string\">&quot;P&quot;</span>)
  (<span class=\"keyword\">if</span> skk-henkan-mode
      (skk-kakutei arg)
    (skk-j-mode-on)))
</code></pre><p>というような、変換中だったら普通に確定キーとして動くけど、それ以外だったらかなに戻す、という動作をするカスタム関数を定義して、それを、</p><pre><code>(add-to-list &apos;skk-rom-kana-rule-list
     &apos;(skk-kakutei-key nil my:skk-kakutei-key))
</code></pre><p>してあげればOK。 <code>skk-rom-kana-rule-list</code> というのは <code>(require &apos;skk-setup)</code> しただけだとまだないので、 <code>(require &apos;skk-vars)</code> も必要だった。</p><p>最終的な設定はこちら：</p><blockquote><p><a href=\"https://github.com/typester/emacs-config/blob/master/conf/init/init-ddskk.el\">https://github.com/typester/emacs-config/blob/master/conf/init/init-ddskk.el</a></p></blockquote><p>はー、しかしこれで、AquaSKK/uim-skk/ddskk 全部で同じ感じで入力できる環境がようやくできた。 <a href=\"http://podcast.bulknews.net/post/44649386760/podcast-ep4-2013-03-06\">miyagawaさんのpodcast</a>で、yak率という言葉がでてきたけど、SKK導入のyak率は相当なものだなぁ。</p>
") (dc:creator nil "typester") (pubDate nil "Fri, 08 Mar 2013 00:42:00 GMT") (category nil "skk, emacs"))) ("ddskkをやっぱり使う" "<p>AquaSKKがEmacs上でも使えるから、ddskkとか使わないなぁと書きましたが、まちがいだった。</p><p><code>C-c C-o</code> のような、キーでも、<code>C-o</code> をAquaSKKにとられてしまうのでだいぶつらい。 なので一度けしたddskkを再度インストール。</p><p>設定はとりあえずこんなかんじで：</p><pre><code>;; key
(define-key global-map (kbd <span class=\"string\">\"C-x C-o\"</span>) <span class=\"warning\">'</span><span class=\"string\">skk-mode)
(setq skk-kakutei-key (kbd \"C-o\"))
(setq mac-pass-control-to-system nil)
;; skkserv
(setq skk-server-host \"127.0.0.1\")
(setq skk-server-portnum 1178)
;; user dic
(setq skk-jisyo-code '</span>utf-8)
(<span class=\"type\">setq</span><span class=\"variable-name\">skk</span>-jisyo (concat (getenv <span class=\"string\">\"HOME\"</span>) <span class=\"string\">\"/Dropbox/skk/skk-jisyo.utf8\"</span>))
</code></pre><p>共有辞書はskkserv経由でAquaSKKをつかう。 ユーザー辞書も文字コードをutf-8にすればAquaSKKと同じものが使える？っぽいのでAquaSKKと同じファイルを指定。 キーも他の環境に併せて <code>C-o</code> に。</p><p>こっちは、uim-skkとちがってユーザー辞書もAquaSKKと同じものが使えるから、学習結果も無駄にならなくて良い感じである。</p><p>唯一、カナモードのときに <code>C-o</code> を押してもひらがなモードに戻らないのが不便。 これはelispフックするかなんかすれば簡単に変更できそうだからそのうち知らべよう。</p>" "http://unknownplace.org/memo/2013/03/07/2/" (20792 24088) new 4 nil nil ((title nil "ddskkをやっぱり使う") (link nil "http://unknownplace.org/memo/2013/03/07/2/") (description nil "<p>AquaSKKがEmacs上でも使えるから、ddskkとか使わないなぁと書きましたが、まちがいだった。</p><p><code>C-c C-o</code> のような、キーでも、<code>C-o</code> をAquaSKKにとられてしまうのでだいぶつらい。 なので一度けしたddskkを再度インストール。</p><p>設定はとりあえずこんなかんじで：</p><pre><code>;; key
(define-key global-map (kbd <span class=\"string\">\"C-x C-o\"</span>) <span class=\"warning\">'</span><span class=\"string\">skk-mode)
(setq skk-kakutei-key (kbd \"C-o\"))
(setq mac-pass-control-to-system nil)

;; skkserv
(setq skk-server-host \"127.0.0.1\")
(setq skk-server-portnum 1178)

;; user dic
(setq skk-jisyo-code '</span>utf-8)
(<span class=\"type\">setq</span><span class=\"variable-name\">skk</span>-jisyo (concat (getenv <span class=\"string\">\"HOME\"</span>) <span class=\"string\">\"/Dropbox/skk/skk-jisyo.utf8\"</span>))
</code></pre><p>共有辞書はskkserv経由でAquaSKKをつかう。 ユーザー辞書も文字コードをutf-8にすればAquaSKKと同じものが使える？っぽいのでAquaSKKと同じファイルを指定。 キーも他の環境に併せて <code>C-o</code> に。</p><p>こっちは、uim-skkとちがってユーザー辞書もAquaSKKと同じものが使えるから、学習結果も無駄にならなくて良い感じである。</p><p>唯一、カナモードのときに <code>C-o</code> を押してもひらがなモードに戻らないのが不便。 これはelispフックするかなんかすれば簡単に変更できそうだからそのうち知らべよう。</p>
") (dc:creator nil "typester") (pubDate nil "Thu, 07 Mar 2013 09:30:00 GMT") (category nil "skk, emacs"))) ("SandS" "<p>SKK導入してShiftキー酷使してつらいなー、と言っていたら、<a href=\"http://blog.kentarok.org/\">antipop</a>さんに、SandSをおすすめされたので、試してみている。</p><p>MacでSandSするのはKeyRemap4MacBookを使うと簡単だ。</p><blockquote><p><a href=\"http://pqrs.org/macosx/doc/keyboard/\">Mac OS X で SandS (Space and Shift) を使う</a></p></blockquote><p>しかしどうしても手が勝手に小指でshiftキーを押してしまうので、一時的に両サイドのshiftキーは無効になるようにした。</p><p>このSandS、SKKでの日本語入力はまぁすぐに慣れるとおもうが、いままで手に染み込んだショートカットキーはだいぶ苦戦しそうだ。</p><p>例えばEmacsでのundoは、<code>C-_</code> だが、押すキーは <code>C-S--</code> である。 これはなかなか、キーを手で覚えているから、これをスペースにおきかえるということがすぐに思いだせなくて非常に難しい。 こういうのはまぁ無理に矯正しないでもいい気もするが、どうしようかなぁ。</p><p>あとEmacsを使っていると致命的につらいのが <code>M-&lt;</code> である。 MacでSandSで、っていう環境でこの場合押すキーは、<code>Cmd-Space-,</code> だ。おしにくい!</p><p>これはIRCでぼやいていたら、<a href=\"http://handlena.me/\">handlename</a>さんが、「<a href=\"http://d.hatena.ne.jp/rubikitch/20090219/sequential_command\">sequential_command</a>つかってるからM-&lt;とか押さないですよ〜(ﾄﾞﾔｧ」みたいな雰囲気のことを言っていた。 たしかにこれは便利そうなので使ってみよう1</p>" "http://unknownplace.org/memo/2013/03/07/1/" (20791 62564) new 5 nil nil ((title nil "SandS") (link nil "http://unknownplace.org/memo/2013/03/07/1/") (description nil "<p>SKK導入してShiftキー酷使してつらいなー、と言っていたら、<a href=\"http://blog.kentarok.org/\">antipop</a>さんに、SandSをおすすめされたので、試してみている。</p><p>MacでSandSするのはKeyRemap4MacBookを使うと簡単だ。</p><blockquote><p><a href=\"http://pqrs.org/macosx/doc/keyboard/\">Mac OS X で SandS (Space and Shift) を使う</a></p></blockquote><p>しかしどうしても手が勝手に小指でshiftキーを押してしまうので、一時的に両サイドのshiftキーは無効になるようにした。</p><p>このSandS、SKKでの日本語入力はまぁすぐに慣れるとおもうが、いままで手に染み込んだショートカットキーはだいぶ苦戦しそうだ。</p><p>例えばEmacsでのundoは、<code>C-_</code> だが、押すキーは <code>C-S--</code> である。 これはなかなか、キーを手で覚えているから、これをスペースにおきかえるということがすぐに思いだせなくて非常に難しい。 こういうのはまぁ無理に矯正しないでもいい気もするが、どうしようかなぁ。</p><p>あとEmacsを使っていると致命的につらいのが <code>M-&lt;</code> である。 MacでSandSで、っていう環境でこの場合押すキーは、<code>Cmd-Space-,</code> だ。おしにくい!</p><p>これはIRCでぼやいていたら、<a href=\"http://handlena.me/\">handlename</a>さんが、「<a href=\"http://d.hatena.ne.jp/rubikitch/20090219/sequential_command\">sequential_command</a>つかってるからM-&lt;とか押さないですよ〜(ﾄﾞﾔｧ」みたいな雰囲気のことを言っていた。 たしかにこれは便利そうなので使ってみよう1</p>
") (dc:creator nil "typester") (pubDate nil "Thu, 07 Mar 2013 01:59:00 GMT") (category nil "skk, emacs"))) ("最近のMacでuim-fep" "<p>先ほどのエントリーで、Macだと <code>uim-fep</code> が SEGV してしまう、と書いたが、どうやらこれは gcc の最適化がよくない感じで動いてしまっているようだ。</p><pre><code>$ export CFLAGS=&apos;-g -O0&apos;
$ export CXXFLAGS=$CFLAGS
</code></pre><p>してビルドしたら普通に動くようになった。</p><p>こんな感じで入れた：</p><pre><code>cd /tmp
wget https://uim.googlecode.com/files/uim-1.8.4.tar.gz
cd uim-1.8.4
export CFLAGS=&apos;-g -O0&apos;
export CXXFLAGS=$CFLAGS
./configure --prefix=$(brew --prefix)/Cellar/uim/1.8.4 --without-x
make
make install
brew link uim
</code></pre><p>アドホックな対応だけど、これでまぁいちおう手元のターミナルでも日本語入力がOKになった。</p><p>あとは学習辞書をAquaSKKと共有したいな〜。</p>" "http://unknownplace.org/memo/2013/03/06/3/" (20791 16484) new 6 nil nil ((title nil "最近のMacでuim-fep") (link nil "http://unknownplace.org/memo/2013/03/06/3/") (description nil "<p>先ほどのエントリーで、Macだと <code>uim-fep</code> が SEGV してしまう、と書いたが、どうやらこれは gcc の最適化がよくない感じで動いてしまっているようだ。</p><pre><code>$ export CFLAGS=&apos;-g -O0&apos;
$ export CXXFLAGS=$CFLAGS
</code></pre><p>してビルドしたら普通に動くようになった。</p><p>こんな感じで入れた：</p><pre><code>cd /tmp
wget https://uim.googlecode.com/files/uim-1.8.4.tar.gz
cd uim-1.8.4

export CFLAGS=&apos;-g -O0&apos;
export CXXFLAGS=$CFLAGS
./configure --prefix=$(brew --prefix)/Cellar/uim/1.8.4 --without-x
make
make install
brew link uim
</code></pre><p>アドホックな対応だけど、これでまぁいちおう手元のターミナルでも日本語入力がOKになった。</p><p>あとは学習辞書をAquaSKKと共有したいな〜。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 06 Mar 2013 13:11:00 GMT") (category nil "skk"))) ("uim-skkでC-jでもカナからひらがなへ戻れるようにカスタマイズ" "<p>AquaSKKとuim-skkを併用していて、<code>C-j</code> キー (僕は <code>C-o</code> に変更してるが) の扱いの違いが若干気になった。</p><p>AquaSKKでは基本的に、<code>C-j</code>を押せば、常にひらがな入力モードになる。</p><p>一方uim-skkは、<code>q</code> を押してカタカナモードになっている状態で <code>C-j</code> を押してもなにも反応しない。また、カタカナモードから英数モードに移行したあとで、再度 <code>C-j</code> を押すとカタカナモードに復帰してしまう。 ひらかなモードに戻るには再度 <code>q</code> でトグルさせてあげる必要があるみたい。</p><p>好みの問題かもしれないが、僕は AquaSKK の挙動のほうが好きなので、uim-skkもそれにあわせることにする。</p><p>しかし不幸なことに、uim-skkのドキュメントにそのように設定する項目が見当らなかったので、以下のようにアドホックにコードを変更した。</p><pre><code>--- /usr/share/uim/skk.scm.orig 2013-03-06 19:12:01.994615339 +0900
+++ /usr/share/uim/skk.scm      2013-03-06 19:16:07.314888197 +0900
@@ -937,6 +937,11 @@
(skk-return-key? key key-state))
(skk-commit-raw sc key key-state)
#f)
+     ((skk-on-key? key key-state)
+      (skk-context-set-state! sc &apos;skk-state-direct)
+      (skk-context-set-kana-mode! sc skk-type-hiragana)
+      (rk-flush rkc)
+      #f)
((skk-wide-latin-key? key key-state)
(skk-context-set-state! sc &apos;skk-state-wide-latin)
(rk-flush rkc)
</code></pre><p>あってるかわからないが、とりあえずこれで希望通りの動作になっているっぽい。</p>" "http://unknownplace.org/memo/2013/03/06/2/" (20791 6044) new 7 nil nil ((title nil "uim-skkでC-jでもカナからひらがなへ戻れるようにカスタマイズ") (link nil "http://unknownplace.org/memo/2013/03/06/2/") (description nil "<p>AquaSKKとuim-skkを併用していて、<code>C-j</code> キー (僕は <code>C-o</code> に変更してるが) の扱いの違いが若干気になった。</p><p>AquaSKKでは基本的に、<code>C-j</code>を押せば、常にひらがな入力モードになる。</p><p>一方uim-skkは、<code>q</code> を押してカタカナモードになっている状態で <code>C-j</code> を押してもなにも反応しない。また、カタカナモードから英数モードに移行したあとで、再度 <code>C-j</code> を押すとカタカナモードに復帰してしまう。 ひらかなモードに戻るには再度 <code>q</code> でトグルさせてあげる必要があるみたい。</p><p>好みの問題かもしれないが、僕は AquaSKK の挙動のほうが好きなので、uim-skkもそれにあわせることにする。</p><p>しかし不幸なことに、uim-skkのドキュメントにそのように設定する項目が見当らなかったので、以下のようにアドホックにコードを変更した。</p><pre><code>--- /usr/share/uim/skk.scm.orig 2013-03-06 19:12:01.994615339 +0900
+++ /usr/share/uim/skk.scm      2013-03-06 19:16:07.314888197 +0900
@@ -937,6 +937,11 @@
          (skk-return-key? key key-state))
       (skk-commit-raw sc key key-state)
       #f)
+     ((skk-on-key? key key-state)
+      (skk-context-set-state! sc &apos;skk-state-direct)
+      (skk-context-set-kana-mode! sc skk-type-hiragana)
+      (rk-flush rkc)
+      #f)
      ((skk-wide-latin-key? key key-state)
       (skk-context-set-state! sc &apos;skk-state-wide-latin)
       (rk-flush rkc)
</code></pre><p>あってるかわからないが、とりあえずこれで希望通りの動作になっているっぽい。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 06 Mar 2013 10:17:00 GMT") (category nil "skk"))) ("ATOKをやめてSKKを使いはじめた" "<p>ATOKをMacを使いはじめてからずっと使っているので、そこそこ長い付き合いではあるけれど、 和英混在入力の使い勝手が悪く、いつも混在入力をするときに、ATOK自体のON/OFFをして対応してしまっていた。</p><p>この使い方は注意しないと、変な文節を学習させてしまうことになる。</p><p>例えば、</p><blockquote><p>nodeよりperlが好き。</p></blockquote><p>のような文章で、英語の部分ではATOKをOFFにするような入力をしていると、 「が好き」という文章をATOKに教えこませてしまう。このような意図しない学習結果が積みかさなると、普通の文章の変換も苦になるほどATOKの調子が悪くなってしまう。</p><p>そのような状態になるたびに、辞書をクリアしたり、 そもそもこのようなことを避けるために、「が」で一旦確定させるクセをつけるなどして、対応してきたが、そんなことを考えながら文章かくのであれば、もっとシンプルな、SKKのような入力方法にしちゃえばいいのではないかなーということで、とりあえず試してみることにした。</p><h4>SKK入門</h4><p>最初のとっかかりは、<a href=\"http://d.hatena.ne.jp/tomoya/20101212/1292089972\">Emacsのddskkというのについてくるチュートリアルが良い</a>、とのことなので、まずMacシステムの入力メソッドはそのままにEmacs内だけでSKKを試してみる。</p><p>それを一通り終えて、SKKの使い方が分かったところで、Mac全体でもSKKが使えるように<a href=\"http://aquaskk.sourceforge.jp/\">AquaSKK</a>をインストール。</p><p>試してみたところEmacs内でもAquaSKKが使えるっぽいので、ddskkは別に使わなくてもいいかなーという感じで、チュートリアルそうそう、ddskkは使わなくなってしまった。 AquaSKKは、Enterで改行しない、というデフォルトで有効になっている余計なオプションを外してしまえば、あとは大体ddskkと同じような使い勝手のようだ。(SKKに詳しい人から見るといろいろ違うのかもしれないが)</p><p>入力方法自体はいたってシンプルで、すぐに覚えられる。 「困った」みたいのの変換が、まだちょっと考えないと入力できないが、まぁすぐに慣れるだろう。</p><p>しかしそれ以外にもいろいろ問題があった。</p><h4>問題1. C-j がつらい</h4><p>SKKは <code>C-j</code> を変換確定やら日本語モードへの移行やらに使用する、言ってしまえば、SKKのメインキーである。</p><p>しかし僕はこれを改行とか、elispの評価とかに使用するのが手に染みついてしまっていて、このキーをSKKで使用するのは苦痛を伴なう。</p><p>この際だし、矯正してしまってもいいかなーともおもってしばらくがんばったが、どうにもだめなので、SKKの該当キーを <code>C-o</code> に変更した。</p><p>AquaSKKのキー設定を変更するには、<code>/Library/Input Methods/AquaSKK.app/Contents/Resources/keymap.conf</code> を <code>/Users/typester/Library/Application Support/AquaSKK/keymap.conf</code> にコピーして、その中の、<code>SKK_JMODE</code> というところを</p><pre><code>SKK_JMODE       ctrl::o
</code></pre><p>みたいな感じに修正すれば良い。</p><h4>問題2. ターミナルで入力できない</h4><p>入力できない、というか <code>C-o</code> が効かない。ので日本語に復帰できない。(<code>C-j</code>に戻してもだめだった)</p><p><code>uim-fep</code> いれろ、みたいのを見て、ウンザリしつつもインストールしたが、しばらく使っていると高確率でSEGVするのでまともに使えなかったためさらにウンザリ。</p><p>これはMacだけの現象かなーと思ってLinuxで試してみると、Linuxではうまく動いた。</p><p>ただ、日常的にターミナルで日本語入力をする場面を考えてみると、IRCをするirssiだけ。 しかも、irssiを動かしているサーバーはLinuxなので、そこにuim-fepをいれてしのぐことにした。</p><p>uim-skk でも、以下のような設定で AquaSKK と同じように <code>C-j</code> を <code>C-o</code> に置きかえた。</p><pre><code># ~/.uim
(define-key skk-on-key? <span class=\"warning\">'</span><span class=\"string\">(\"&lt;Control&gt;o\"))
(define-key skk-commit-key? '</span>(<span class=\"string\">\"&lt;Control&gt;o\"</span>))
(define-key skk-state-direct-no-preedit-nop-key? <span class=\"warning\">'</span><span class=\"string\">(\"&lt;Control&gt;o\"))
</span></code></pre><p>ユーザー辞書をDropboxかなにかで同期できたらいいなーとおもったが、 AquaSKKのユーザー辞書は utf-8、uim-skk のそれは euc-jp と、文字コードが違い、しかもそれを変更する方法がわからなかったので、とりあえず別々の学習になってしまってもいいか〜ってなってる。</p><h4>問題3. ひらかなの小文字入力</h4><p>いままでずっと「la」で「ぁ」というように <code>l</code> キーで小文字入力していたが、SKKではこのキーは英字入力への切り替えキーなので使うことができない。 これもキー設定をかえてもよかったが、ここは <code>x</code> を使うように矯正する方向でがんばる。</p><h4>使用感</h4><p>送り仮名を意識しないといけなかったり、その送り仮名が「っ」だったりするときの入力はまだまだ慣れなくて難しい。 慣れてもイメージとして、ATOKほど高速に日本語入力ができる感じはない。ATOKはやっぱり賢いのでガーーっと長文を一気に入力して一発変換という使い方をしても精度が高く、日本語だけを入力する分にはやはり最高の入力メソッドであると思う。</p><p>SKKのいいところは仕組みがシンプルなことと、実装がいっぱいあってどこでも動くところかな。</p><p>シンプルなので自分でコントロールできると思う。ATOKは学習がおかしくなってしまったらもう途方にくれるしかなかった。実装がいっぱいあるのも、AquaSKKがなくなってもEmacsがあれば大丈夫、みたいな安心感はある。</p><p>入力速度に関しては、Shiftキーを非常に多用するので、親指Shiftとかを導入したらもう少し高速に入力できるようになるのだろうかなー。</p>" "http://unknownplace.org/memo/2013/03/06/1/" (20790 61680) new 8 nil nil ((title nil "ATOKをやめてSKKを使いはじめた") (link nil "http://unknownplace.org/memo/2013/03/06/1/") (description nil "<p>ATOKをMacを使いはじめてからずっと使っているので、そこそこ長い付き合いではあるけれど、 和英混在入力の使い勝手が悪く、いつも混在入力をするときに、ATOK自体のON/OFFをして対応してしまっていた。</p><p>この使い方は注意しないと、変な文節を学習させてしまうことになる。</p><p>例えば、</p><blockquote><p>nodeよりperlが好き。</p></blockquote><p>のような文章で、英語の部分ではATOKをOFFにするような入力をしていると、 「が好き」という文章をATOKに教えこませてしまう。このような意図しない学習結果が積みかさなると、普通の文章の変換も苦になるほどATOKの調子が悪くなってしまう。</p><p>そのような状態になるたびに、辞書をクリアしたり、 そもそもこのようなことを避けるために、「が」で一旦確定させるクセをつけるなどして、対応してきたが、そんなことを考えながら文章かくのであれば、もっとシンプルな、SKKのような入力方法にしちゃえばいいのではないかなーということで、とりあえず試してみることにした。</p><h4>SKK入門</h4><p>最初のとっかかりは、<a href=\"http://d.hatena.ne.jp/tomoya/20101212/1292089972\">Emacsのddskkというのについてくるチュートリアルが良い</a>、とのことなので、まずMacシステムの入力メソッドはそのままにEmacs内だけでSKKを試してみる。</p><p>それを一通り終えて、SKKの使い方が分かったところで、Mac全体でもSKKが使えるように<a href=\"http://aquaskk.sourceforge.jp/\">AquaSKK</a>をインストール。</p><p>試してみたところEmacs内でもAquaSKKが使えるっぽいので、ddskkは別に使わなくてもいいかなーという感じで、チュートリアルそうそう、ddskkは使わなくなってしまった。 AquaSKKは、Enterで改行しない、というデフォルトで有効になっている余計なオプションを外してしまえば、あとは大体ddskkと同じような使い勝手のようだ。(SKKに詳しい人から見るといろいろ違うのかもしれないが)</p><p>入力方法自体はいたってシンプルで、すぐに覚えられる。 「困った」みたいのの変換が、まだちょっと考えないと入力できないが、まぁすぐに慣れるだろう。</p><p>しかしそれ以外にもいろいろ問題があった。</p><h4>問題1. C-j がつらい</h4><p>SKKは <code>C-j</code> を変換確定やら日本語モードへの移行やらに使用する、言ってしまえば、SKKのメインキーである。</p><p>しかし僕はこれを改行とか、elispの評価とかに使用するのが手に染みついてしまっていて、このキーをSKKで使用するのは苦痛を伴なう。</p><p>この際だし、矯正してしまってもいいかなーともおもってしばらくがんばったが、どうにもだめなので、SKKの該当キーを <code>C-o</code> に変更した。</p><p>AquaSKKのキー設定を変更するには、<code>/Library/Input Methods/AquaSKK.app/Contents/Resources/keymap.conf</code> を <code>/Users/typester/Library/Application Support/AquaSKK/keymap.conf</code> にコピーして、その中の、<code>SKK_JMODE</code> というところを</p><pre><code>SKK_JMODE       ctrl::o
</code></pre><p>みたいな感じに修正すれば良い。</p><h4>問題2. ターミナルで入力できない</h4><p>入力できない、というか <code>C-o</code> が効かない。ので日本語に復帰できない。(<code>C-j</code>に戻してもだめだった)</p><p><code>uim-fep</code> いれろ、みたいのを見て、ウンザリしつつもインストールしたが、しばらく使っていると高確率でSEGVするのでまともに使えなかったためさらにウンザリ。</p><p>これはMacだけの現象かなーと思ってLinuxで試してみると、Linuxではうまく動いた。</p><p>ただ、日常的にターミナルで日本語入力をする場面を考えてみると、IRCをするirssiだけ。 しかも、irssiを動かしているサーバーはLinuxなので、そこにuim-fepをいれてしのぐことにした。</p><p>uim-skk でも、以下のような設定で AquaSKK と同じように <code>C-j</code> を <code>C-o</code> に置きかえた。</p><pre><code># ~/.uim
(define-key skk-on-key? <span class=\"warning\">'</span><span class=\"string\">(\"&lt;Control&gt;o\"))
(define-key skk-commit-key? '</span>(<span class=\"string\">\"&lt;Control&gt;o\"</span>))
(define-key skk-state-direct-no-preedit-nop-key? <span class=\"warning\">'</span><span class=\"string\">(\"&lt;Control&gt;o\"))
</span></code></pre><p>ユーザー辞書をDropboxかなにかで同期できたらいいなーとおもったが、 AquaSKKのユーザー辞書は utf-8、uim-skk のそれは euc-jp と、文字コードが違い、しかもそれを変更する方法がわからなかったので、とりあえず別々の学習になってしまってもいいか〜ってなってる。</p><h4>問題3. ひらかなの小文字入力</h4><p>いままでずっと「la」で「ぁ」というように <code>l</code> キーで小文字入力していたが、SKKではこのキーは英字入力への切り替えキーなので使うことができない。 これもキー設定をかえてもよかったが、ここは <code>x</code> を使うように矯正する方向でがんばる。</p><h4>使用感</h4><p>送り仮名を意識しないといけなかったり、その送り仮名が「っ」だったりするときの入力はまだまだ慣れなくて難しい。 慣れてもイメージとして、ATOKほど高速に日本語入力ができる感じはない。ATOKはやっぱり賢いのでガーーっと長文を一気に入力して一発変換という使い方をしても精度が高く、日本語だけを入力する分にはやはり最高の入力メソッドであると思う。</p><p>SKKのいいところは仕組みがシンプルなことと、実装がいっぱいあってどこでも動くところかな。</p><p>シンプルなので自分でコントロールできると思う。ATOKは学習がおかしくなってしまったらもう途方にくれるしかなかった。実装がいっぱいあるのも、AquaSKKがなくなってもEmacsがあれば大丈夫、みたいな安心感はある。</p><p>入力速度に関しては、Shiftキーを非常に多用するので、親指Shiftとかを導入したらもう少し高速に入力できるようになるのだろうかなー。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 06 Mar 2013 07:32:00 GMT") (category nil "life, skk"))) ("plenv の Perl バージョンを取得する zsh スクリプト" "<p><a href=\"http://blog.64p.org/entry/2013/01/21/134639\">plenv</a> でつかわれる Perl をプロンプトに表示したりするのに使えるかと。検出ロジックは plenv とおなじつもり。</p><pre><code><span class=\"function-name\">plenv_perl_version</span>() {
<span class=\"type\">local</span><span class=\"variable-name\">dir</span>=$PWD
[[ -n $PLENV_VERSION ]] &amp;&amp; { echo $PLENV_VERSION; <span class=\"keyword\">return</span> }
<span class=\"keyword\">while</span> [[ -n $dir &amp;&amp; $dir != <span class=\"string\">\"/\"</span> &amp;&amp; $dir != <span class=\"string\">\".\"</span> ]]; <span class=\"keyword\">do</span><span class=\"keyword\">if</span> [[ -f <span class=\"string\">\"$dir/.perl-version\"</span> ]]; <span class=\"type\">then</span><span class=\"variable-name\">head</span> -n 1 <span class=\"string\">\"$dir/.perl-version\"</span><span class=\"keyword\">return</span>
fi
dir=$dir:h
done
local plenv_home=$PLENV_HOME
[[ -z $PLENV_HOME &amp;&amp; -n $HOME ]] &amp;&amp; plenv_home=<span class=\"string\">\"$HOME/.plenv\"</span><span class=\"keyword\">if</span> [[ -f <span class=\"string\">\"$plenv_home/version\"</span> ]]; <span class=\"type\">then</span><span class=\"variable-name\">head</span> -n 1 <span class=\"string\">\"$plenv_home/version\"</span>
fi
}
</code></pre><p><code>dir=$dir:h</code> とかしてるので zsh でしか動かないと思う。</p><p>しかし、書くのにだいぶ時間かかった。。</p>" "http://unknownplace.org/memo/2013/01/24/1/" (20736 33024) new 9 nil nil ((title nil "plenv の Perl バージョンを取得する zsh スクリプト") (link nil "http://unknownplace.org/memo/2013/01/24/1/") (description nil "<p><a href=\"http://blog.64p.org/entry/2013/01/21/134639\">plenv</a> でつかわれる Perl をプロンプトに表示したりするのに使えるかと。検出ロジックは plenv とおなじつもり。</p><pre><code><span class=\"function-name\">plenv_perl_version</span>() {
    <span class=\"type\">local</span><span class=\"variable-name\">dir</span>=$PWD

    [[ -n $PLENV_VERSION ]] &amp;&amp; { echo $PLENV_VERSION; <span class=\"keyword\">return</span> }

    <span class=\"keyword\">while</span> [[ -n $dir &amp;&amp; $dir != <span class=\"string\">\"/\"</span> &amp;&amp; $dir != <span class=\"string\">\".\"</span> ]]; <span class=\"keyword\">do</span><span class=\"keyword\">if</span> [[ -f <span class=\"string\">\"$dir/.perl-version\"</span> ]]; <span class=\"type\">then</span><span class=\"variable-name\">head</span> -n 1 <span class=\"string\">\"$dir/.perl-version\"</span><span class=\"keyword\">return</span>
        fi
        dir=$dir:h
    done

    local plenv_home=$PLENV_HOME
    [[ -z $PLENV_HOME &amp;&amp; -n $HOME ]] &amp;&amp; plenv_home=<span class=\"string\">\"$HOME/.plenv\"</span><span class=\"keyword\">if</span> [[ -f <span class=\"string\">\"$plenv_home/version\"</span> ]]; <span class=\"type\">then</span><span class=\"variable-name\">head</span> -n 1 <span class=\"string\">\"$plenv_home/version\"</span>
    fi
}
</code></pre><p><code>dir=$dir:h</code> とかしてるので zsh でしか動かないと思う。</p><p>しかし、書くのにだいぶ時間かかった。。</p>
") (dc:creator nil "typester") (pubDate nil "Thu, 24 Jan 2013 00:32:00 GMT") (category nil "zsh"))) ("plenv が良い感じ" "<p>perlbrew 使ってたんだけど、tokuhirom がつくってる <a href=\"http://blog.64p.org/entry/2013/01/21/134639\">plenv</a> にスイッチした。</p><p>perlbrew よりシンプルでなにやってるかわかるのがなにより。 というか perlbrew がよく分からなすぎるという話もある。</p><p>plenv だとさらに <code>.perl-version</code> というファイルに perl のバージョンをいれておくと、そのディレクトリ以下では自動的にそのバージョンの perl が使われるという機能があって、これがだいぶはかどる。</p><p>perlbrew で入れた各種 perl は <code>-g</code> つけわすれて SEGV したときこまってて別途 <code>--as=5.14.2-debug</code> みたいのをつくってたけど、 その経験を生かして今度は最初から</p><pre><code>$ plenv install 5.14.2 -D=DEBUGGING=-g
</code></pre><p>な感じで全部入れるようにした。ちなみにこの install オプションはまだドキュメントになってないのでまだ変わるかもしれないから、この記述は参考にしないようおねがいいたす。</p><p>perlbrew と比べるといったんラッパーをかます分 bootstrap が遅いというのがあって、 flymake とかだと結構気になるけど、 perl のバージョン検出の仕組みはシンプルだから elisp でかき直すのもすぐできそう。</p>" "http://unknownplace.org/memo/2013/01/23/1/" (20735 19600) new 10 nil nil ((title nil "plenv が良い感じ") (link nil "http://unknownplace.org/memo/2013/01/23/1/") (description nil "<p>perlbrew 使ってたんだけど、tokuhirom がつくってる <a href=\"http://blog.64p.org/entry/2013/01/21/134639\">plenv</a> にスイッチした。</p><p>perlbrew よりシンプルでなにやってるかわかるのがなにより。 というか perlbrew がよく分からなすぎるという話もある。</p><p>plenv だとさらに <code>.perl-version</code> というファイルに perl のバージョンをいれておくと、そのディレクトリ以下では自動的にそのバージョンの perl が使われるという機能があって、これがだいぶはかどる。</p><p>perlbrew で入れた各種 perl は <code>-g</code> つけわすれて SEGV したときこまってて別途 <code>--as=5.14.2-debug</code> みたいのをつくってたけど、 その経験を生かして今度は最初から</p><pre><code>$ plenv install 5.14.2 -D=DEBUGGING=-g
</code></pre><p>な感じで全部入れるようにした。ちなみにこの install オプションはまだドキュメントになってないのでまだ変わるかもしれないから、この記述は参考にしないようおねがいいたす。</p><p>perlbrew と比べるといったんラッパーをかます分 bootstrap が遅いというのがあって、 flymake とかだと結構気になるけど、 perl のバージョン検出の仕組みはシンプルだから elisp でかき直すのもすぐできそう。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 23 Jan 2013 02:36:00 GMT") (category nil "perl"))) ("Emacsの設定を見直し、 el-get の distributed セットアップに統一" "<p>いままで<a href=\"https://github.com/typester/emacs-config-old\">秘伝のタレのような設定</a>を使い続けていたのだが、どうもしばらく使っているとEmacsがCPUを非常に食うようになってくる。 flymakeの設定かなー？とかほかにもいろいろ怪しげなところを削ってみたりしたがわからず、だましだまし使っていた。</p><p>そういう理由もあってEmacs設定をリセットしたいと思っていたので、<a href=\"http://amzn.to/10wxFU8\">Emacs実践入門</a>や Advent Calendar を読んでいたら <a href=\"https://github.com/dimitri/el-get\">el-get</a> というパッケージマネージャがなかなかよさそうだと思った。</p><p>これ、存在自体はまえから知っていたけど秘伝のタレベースな自分は使わないだろうなーとスルーしていた物だが、 ドキュメント(info)を読んでみると思った以上によさげだと言うことが分かった。 Mac 使ってる人にわかりやすくいうなら Emacs 用の homebrew という感じ。</p><p>なかでも <code>6.3 Distributed Setup</code> で紹介されてる方法を使うと、他の環境に設定を持って行ったときも初回起動時にパッケージをよしなにインストールしてくれて自動的に同じ環境にしてくれる。これはなかなか便利。</p><p>というわけで作り直した設定がこちら、まだ perl と clmemo 周りの最小限の設定しかないけれども。</p><blockquote><p><a href=\"https://github.com/typester/emacs-config\">https://github.com/typester/emacs-config</a></p></blockquote><p><code>~/.emacs.d/</code> 以下に置かなくても動くようにつくってあるので、</p><pre><code>$ git clone git://github.com/typester/emacs-config.git
# no-window の場合
$ emacs -q -l emacs-config/init.el
# Cocoa の場合
$ /Applications/Emacs.app/Contents/MacOS/Emacs -q -l emacs-config/init.el
</code></pre><p>とするともりもりパッケージのセットアップが始まって（時間はかかるけど）僕と同じ設定で Emacs を試せる状態になるはず。</p><p>Emacs24 前提と、 el-get のために git コマンドが <code>exec-path</code> に必要。</p><p>このように非常にカジュアルに人の設定を試せるのはかなり革命的。 （もちろん複数の環境で設定を同期するのにも革命的）</p><p>なのでみんながこれ前提でセットアップしてくれたら最高だなーと思いますのでこれを読んでる Emacs ユーザーの方々におかれましては el-get ベースな設定を一考していただければ幸いでございます。</p>" "http://unknownplace.org/memo/2013/01/21/1/" (20732 48928) new 11 nil nil ((title nil "Emacsの設定を見直し、 el-get の distributed セットアップに統一") (link nil "http://unknownplace.org/memo/2013/01/21/1/") (description nil "<p>いままで<a href=\"https://github.com/typester/emacs-config-old\">秘伝のタレのような設定</a>を使い続けていたのだが、どうもしばらく使っているとEmacsがCPUを非常に食うようになってくる。 flymakeの設定かなー？とかほかにもいろいろ怪しげなところを削ってみたりしたがわからず、だましだまし使っていた。</p><p>そういう理由もあってEmacs設定をリセットしたいと思っていたので、<a href=\"http://amzn.to/10wxFU8\">Emacs実践入門</a>や Advent Calendar を読んでいたら <a href=\"https://github.com/dimitri/el-get\">el-get</a> というパッケージマネージャがなかなかよさそうだと思った。</p><p>これ、存在自体はまえから知っていたけど秘伝のタレベースな自分は使わないだろうなーとスルーしていた物だが、 ドキュメント(info)を読んでみると思った以上によさげだと言うことが分かった。 Mac 使ってる人にわかりやすくいうなら Emacs 用の homebrew という感じ。</p><p>なかでも <code>6.3 Distributed Setup</code> で紹介されてる方法を使うと、他の環境に設定を持って行ったときも初回起動時にパッケージをよしなにインストールしてくれて自動的に同じ環境にしてくれる。これはなかなか便利。</p><p>というわけで作り直した設定がこちら、まだ perl と clmemo 周りの最小限の設定しかないけれども。</p><blockquote><p><a href=\"https://github.com/typester/emacs-config\">https://github.com/typester/emacs-config</a></p></blockquote><p><code>~/.emacs.d/</code> 以下に置かなくても動くようにつくってあるので、</p><pre><code>$ git clone git://github.com/typester/emacs-config.git

# no-window の場合
$ emacs -q -l emacs-config/init.el

# Cocoa の場合
$ /Applications/Emacs.app/Contents/MacOS/Emacs -q -l emacs-config/init.el
</code></pre><p>とするともりもりパッケージのセットアップが始まって（時間はかかるけど）僕と同じ設定で Emacs を試せる状態になるはず。</p><p>Emacs24 前提と、 el-get のために git コマンドが <code>exec-path</code> に必要。</p><p>このように非常にカジュアルに人の設定を試せるのはかなり革命的。 （もちろん複数の環境で設定を同期するのにも革命的）</p><p>なのでみんながこれ前提でセットアップしてくれたら最高だなーと思いますのでこれを読んでる Emacs ユーザーの方々におかれましては el-get ベースな設定を一考していただければ幸いでございます。</p>
") (dc:creator nil "typester") (pubDate nil "Mon, 21 Jan 2013 04:08:00 GMT") (category nil "emacs"))) ("MacでのBluetoothホストコントロールデバイスの優先順位の変更" "<p>毎回ググるのでメモ。</p><p>OSX は USBのドングルとかBluetoothホストコントローラとかをつけたときの挙動を、ファームウェアの NVRAM ってところに <code>bluetoothHostControllerSwitchBehavior</code> というキーで値を設定してあげることによって以下の3種類のうちから決めることができる。</p><ul><li><code>never</code>: 外付けのホストコントローラにスイッチせず、つねにビルドインコントローラを使う</li><li><code>always</code>: ビルドインコントローラからdetachして外付けのホストコントローラにスイッチする</li><li><code>default</code>: 外付けホストコントローラがApple以外のときはビルドインからdetachして外付けデバイスを使う</li></ul><p>デフォルトはもちろん <code>default</code>。</p><p>で、 BT4LE に対応したドングルを持っていれば、BT4積んでない昔の MacBook なんかでも CoreBluetooth つかったり開発したりできる。</p><p>さらに、あえてここで <code>never</code> を設定して外付けのホストコントローラを使わない設定にすると、 余っている外付けホストコントローラを iOS Simulator から利用することができる。</p><p>この設定を変えるには <code>nvram</code> ってコマンドを使う:</p><pre><code>$ sudo nvram bluetoothHostControllerSwitchBehavior=<span class=\"string\">\"never\"</span></code></pre><p>とかでOK。</p><p>詳しくは</p><blockquote><p><a href=\"http://developer.apple.com/library/ios/#technotes/tn2295/_index.html\">Technical Note TN2295: Testing Core Bluetooth Applications in the iOS Simulator</a></p></blockquote><p>参照。</p>" "http://unknownplace.org/memo/2013/01/16/1/" (20726 7864) new 12 nil nil ((title nil "MacでのBluetoothホストコントロールデバイスの優先順位の変更") (link nil "http://unknownplace.org/memo/2013/01/16/1/") (description nil "<p>毎回ググるのでメモ。</p><p>OSX は USBのドングルとかBluetoothホストコントローラとかをつけたときの挙動を、ファームウェアの NVRAM ってところに <code>bluetoothHostControllerSwitchBehavior</code> というキーで値を設定してあげることによって以下の3種類のうちから決めることができる。</p><ul><li><code>never</code>: 外付けのホストコントローラにスイッチせず、つねにビルドインコントローラを使う</li><li><code>always</code>: ビルドインコントローラからdetachして外付けのホストコントローラにスイッチする</li><li><code>default</code>: 外付けホストコントローラがApple以外のときはビルドインからdetachして外付けデバイスを使う</li></ul><p>デフォルトはもちろん <code>default</code>。</p><p>で、 BT4LE に対応したドングルを持っていれば、BT4積んでない昔の MacBook なんかでも CoreBluetooth つかったり開発したりできる。</p><p>さらに、あえてここで <code>never</code> を設定して外付けのホストコントローラを使わない設定にすると、 余っている外付けホストコントローラを iOS Simulator から利用することができる。</p><p>この設定を変えるには <code>nvram</code> ってコマンドを使う:</p><pre><code>$ sudo nvram bluetoothHostControllerSwitchBehavior=<span class=\"string\">\"never\"</span></code></pre><p>とかでOK。</p><p>詳しくは</p><blockquote><p><a href=\"http://developer.apple.com/library/ios/#technotes/tn2295/_index.html\">Technical Note TN2295: Testing Core Bluetooth Applications in the iOS Simulator</a></p></blockquote><p>参照。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 16 Jan 2013 03:30:00 GMT") (category nil "osx"))) ("Any::Moose とか幻想やったんや" "<p><code>Any::Moose</code> は <code>Moose</code> と <code>Mouse</code> のラッパーで、バックエンドがどちらになるかは <code>use Any::Moose</code> した時点で <code>Moose</code> or <code>Mouse</code> がロードされているかによって変わる。</p><p>どこかで <code>use Moose</code> していたら <code>use Any::Moose</code> は <code>use Moose</code> としてうごくし、 そうじゃない場合は <code>use Mouse</code> としてうごく。</p><p>これはなんのためにあるかというと、MouseとMooseの両方のモジュールを混ぜて使うと壊れるからなんだけど、 そもそも混ぜて使って問題になるのは Mouse のクラスを Moose で extends したりとか、そういう Moose 周りの機能を相互に使おうとした場合だけであって、混ぜて使っていてもそれぞれのクラスを普通に使い合う分にはなんの問題もない。</p><p>また、昔はruntimeの速度にそこまで性能差はなかったということもある。(<code>make_immutable</code> してたら Moose もそこまで遅くない)</p><p>しかし現在では gfx マジックによって Mouse は激しく高速化されており、runtime での速度差もかなりある。 したがって、Moose的な意味で相互利用する場合でなければ、<code>Any::Moose</code> が勝手に Moose になるとうれしくない場合がほとんどだ。</p><p>さらに、MooseとMouseの非互換によって、バックエンドがMouseのときはうまく動いていたコードが、 どこからMooseモジュールを使用したことによってバックエンドがMooseに切り替わった瞬間に動かなくなるという事例もある。</p><p>結論として <code>Any::Moose</code> つかわないで <code>Mouse</code> を直で使う、で誰も困らないなーとおもってるのでそうしていこうと考えております。</p><p>もし混ぜることがあったとしても Moose からつかうときは non Moose なクラスとして扱うようにすれば別に問題ないでしょう。(僕はそもそもMoose使わないけどw)</p>" "http://unknownplace.org/memo/2012/12/25/1/" (20697 2328) new 13 nil nil ((title nil "Any::Moose とか幻想やったんや") (link nil "http://unknownplace.org/memo/2012/12/25/1/") (description nil "<p><code>Any::Moose</code> は <code>Moose</code> と <code>Mouse</code> のラッパーで、バックエンドがどちらになるかは <code>use Any::Moose</code> した時点で <code>Moose</code> or <code>Mouse</code> がロードされているかによって変わる。</p><p>どこかで <code>use Moose</code> していたら <code>use Any::Moose</code> は <code>use Moose</code> としてうごくし、 そうじゃない場合は <code>use Mouse</code> としてうごく。</p><p>これはなんのためにあるかというと、MouseとMooseの両方のモジュールを混ぜて使うと壊れるからなんだけど、 そもそも混ぜて使って問題になるのは Mouse のクラスを Moose で extends したりとか、そういう Moose 周りの機能を相互に使おうとした場合だけであって、混ぜて使っていてもそれぞれのクラスを普通に使い合う分にはなんの問題もない。</p><p>また、昔はruntimeの速度にそこまで性能差はなかったということもある。(<code>make_immutable</code> してたら Moose もそこまで遅くない)</p><p>しかし現在では gfx マジックによって Mouse は激しく高速化されており、runtime での速度差もかなりある。 したがって、Moose的な意味で相互利用する場合でなければ、<code>Any::Moose</code> が勝手に Moose になるとうれしくない場合がほとんどだ。</p><p>さらに、MooseとMouseの非互換によって、バックエンドがMouseのときはうまく動いていたコードが、 どこからMooseモジュールを使用したことによってバックエンドがMooseに切り替わった瞬間に動かなくなるという事例もある。</p><p>結論として <code>Any::Moose</code> つかわないで <code>Mouse</code> を直で使う、で誰も困らないなーとおもってるのでそうしていこうと考えております。</p><p>もし混ぜることがあったとしても Moose からつかうときは non Moose なクラスとして扱うようにすれば別に問題ないでしょう。(僕はそもそもMoose使わないけどw)</p>
") (dc:creator nil "typester") (pubDate nil "Tue, 25 Dec 2012 02:02:00 GMT") (category nil "perl"))) ("Redis布教活動報告 ISUCON 編" "<p>最近 <code>Test::RedisServer</code> とかもろもろつくっててばれてるかもしれませんが、だいぶ Redis 期にありまして、最近の趣味は？っていう問いにはだいたいRedisのソースを読むことですってなくらいなのですが、 memcached とかシンプルな KVS と比べるとだいぶ機能が豊富なので使い方を迷ったりとかそういう事例もあり、周りにもう少し使える人を増やさなければ僕の書いたコードが属人化しててつらい感じになるなーっていうわけで、 布教活動をおこなっておりまして、その一環として ISUCON2 に参加してきましたのでその報告です。</p><blockquote><p><a href=\"http://blog.livedoor.jp/techblog/archives/67726489.html\">livedoor Techブログ : #isucon2 リアルタイムフォトレポート 更新終了</a></p></blockquote><p>前回の優勝チームに混ぜてもらった感じでだいぶついてる感じもしますが、見事連覇を果たせ、懇親会でも redis redis と連呼してきたのでだいぶ興味持った方も多いのではないでしょうか！</p><p>そんな布教活動視点から ISUCON を振り返ってみたいと思います。</p><h4>Redis がつかえるかどうか</h4><p>開始直後はチーム間でのコンフリクトをさけるために <code>git push</code> で rev サーバーに反映ってのだけは設定しましたが、そのあとはすぐボトルネックそうなところで Redis に置き換えられる物はないか探していました。</p><p>すぐに購入トランザクションが見つかります。Redis には Set 型という集合を表す型があり、それを使うと集合のなかから排他的に一つランダムでとりだして消すというのをとても効率的に実装することができます。 ISUCON ではこのランダム条件が（チェッカーがバグでスルーしていたみたいですけど）なかなかきびしかったところだと思いますが、そこもするっと解決です。 なお、順番に購入という条件であれば双方向リストの List 型を使うのが正解でしょう。こちらも先頭or末尾からの取得＆削除を排他的に行うことができます。</p><p>ついでに購入履歴も Redis にもたせておけばそこから、サイドバー(<code>recent_sold</code>)とCSV吐き出しもどちらも行えそうだなと思いました。</p><p>ここまででとりあえずこの購入トランザクションだけでも Redis にうつしたら DB ロックする必要がないのでだいぶ良さそうだなと思い、redisブランチやりますとチームに宣言します。</p><h4>書き換えの流れ</h4><p>そしてもりもり書き換えました。</p><ul><li><code>POST /admin</code> でMySQLにデータを流し込んだあとに stock のデータをすべて redis にコピーする。(<code>stock:{variation_id}</code> というキーのSet)</li><li><code>POST /buy</code> で対象の Set から一つ取り出し、<code>order_history</code> という List にアーティスト名などの付属情報込みな辞書情報をPush。</li><li>サイドバーは <code>order_history</code> から最新10件を取得するように変更</li><li>CSV書き出しは <code>order_history</code> をまるっと書き出す感じ</li><li>その他もろもろテンプレに渡してるデータをよしなに変更</li></ul><p>といった感じですが、アプリのテストコードがないのでだいぶ変更が手探りな感じでつらかったです。とくにテンプレ周り。なおしてベンチ止まって、ベンチのエラー見て修正という…。 そんなつらいかんじや実際の作業内容は <a href=\"https://github.com/kayac/isucon2/commits/redis\">redis ブランチのコミットログ</a>を参照いただくと分かるかなと思います。</p><h4>他になんかあるか？</h4><p>コード見てるだけだとわからなかったので fujiwara さんにボトルネック探してもらいつつ、自分はとくにやることもないので非同期の実装を模索しておりました。 この時点ではforkモデルの限界なんじゃなかろうかと思っていて非同期にしてベンチ取ってみるか、みたいな感じでしたが、Perlで非同期にすると書き直しになるし、nodeの実装いじっててもうまく動かなくてすぐにあきらめてしまったんですが、それは fujiwara さんがテンプレのレンダリングボトルネックを見つけてくれて、そちらを直したら今までのアプリでも十分スループット（reverse proxy &lt;-&gt; app 間）が出ており、非同期全然意味ありませんでした。</p><p>まぁそうだよね、IOウェイトが問題になるような場合以外は非同期意味ないなーとそのとき思った次第です。</p><h4>テンプレキャッシュ</h4><p>組長が見つけてくれたチケットの座席表のレンダリングのボトルネック。これも Redis でキャッシュするようにしました。 Redis は単純なKVSとしてみても十分高速なのでこういう用途にも使えます。</p><h4>データ永続化</h4><p>これは本家ドキュメントよくまとまっております。</p><blockquote><p><a href=\"http://redis.io/topics/persistence\">http://redis.io/topics/persistence</a></p></blockquote><p>スナップショット(dump)と追記ログ(appendlog - MySQLのbinlog的な)の二種類の永続化方法があり、dumpはバックアップ用、復元をappendlogから、ってのがオススメな方法。</p><p>appendlog は基本的にはプロトコルログなんですが、大きくなるとバックグラウンドで最適化されて小さくなります。デフォルトでは fsync が1秒ごとに走るので最悪そこまでのデータは保全される。 書き込み毎に sync って言うのも設定でできますがパフォーマンス的につらいことになるでしょう。</p><p>これがISUCONのレギュレーションを満たしているかは定かではありませんがとりあえず fujiwara 組では1秒fsyncなappendlogでデータ永続化をしました。</p><p>また、メモリいっぱい使い切っているような大きなデータセットの場合に appendlog するは不安感ありますが、自分もまだ試したことがないので、近いうちに試したいと思っております。</p><h4>まとめ</h4><p>あんまりおすすめしまくっていると勘違いしちゃう人もいるかもしれないのでいちおう補足しておきますが、単純に MySQL を Redis に置き換えたら速くなる、っていうことはないです。 MySQLがいいところ、Redisがいいところ、（もちろんその他のツールも）どちらもあるので、 Pros and Cons やトレードオフを考えた上で選択するのが大事です。</p><p>僕自身も Redis つかっているといっても運用上のノウハウなどまだまだうちも足りていないのでそこはこれから精進していきたいと思います。</p><p>しかし、ISUCON楽しいですね。 #isucon のログによると</p><pre><code>11:47 &lt; typester&gt; すでにだいぶたのしい
</code></pre><p>といっており、ここからずーーーっと終了までたのしかったですね。</p><p>あと珈琲ありがとうございました！</p><h4>番外: Xslate の速さを実感</h4><p>家帰って他の言語の実装をうごかしてみると、明らかに座席表のレンダリングが遅いんです。ブラウザで見てボトルネックって分かるレベル。 でも、Perl の実装をブラウザで見た人はあのページの遅さはテンプレートエンジンじゃなくてブラウザがレンダリングするのに時間かかってる、くらいにしか感じない気がする。 今回の罠は Xslate の速さと言っても良いのではないでしょうか。</p><p>これは gfx++ といわざるを得ませんね！</p>" "http://unknownplace.org/memo/2012/11/07/1/" (20633 41272) new 14 nil nil ((title nil "Redis布教活動報告 ISUCON 編") (link nil "http://unknownplace.org/memo/2012/11/07/1/") (description nil "<p>最近 <code>Test::RedisServer</code> とかもろもろつくっててばれてるかもしれませんが、だいぶ Redis 期にありまして、最近の趣味は？っていう問いにはだいたいRedisのソースを読むことですってなくらいなのですが、 memcached とかシンプルな KVS と比べるとだいぶ機能が豊富なので使い方を迷ったりとかそういう事例もあり、周りにもう少し使える人を増やさなければ僕の書いたコードが属人化しててつらい感じになるなーっていうわけで、 布教活動をおこなっておりまして、その一環として ISUCON2 に参加してきましたのでその報告です。</p><blockquote><p><a href=\"http://blog.livedoor.jp/techblog/archives/67726489.html\">livedoor Techブログ : #isucon2 リアルタイムフォトレポート 更新終了</a></p></blockquote><p>前回の優勝チームに混ぜてもらった感じでだいぶついてる感じもしますが、見事連覇を果たせ、懇親会でも redis redis と連呼してきたのでだいぶ興味持った方も多いのではないでしょうか！</p><p>そんな布教活動視点から ISUCON を振り返ってみたいと思います。</p><h4>Redis がつかえるかどうか</h4><p>開始直後はチーム間でのコンフリクトをさけるために <code>git push</code> で rev サーバーに反映ってのだけは設定しましたが、そのあとはすぐボトルネックそうなところで Redis に置き換えられる物はないか探していました。</p><p>すぐに購入トランザクションが見つかります。Redis には Set 型という集合を表す型があり、それを使うと集合のなかから排他的に一つランダムでとりだして消すというのをとても効率的に実装することができます。 ISUCON ではこのランダム条件が（チェッカーがバグでスルーしていたみたいですけど）なかなかきびしかったところだと思いますが、そこもするっと解決です。 なお、順番に購入という条件であれば双方向リストの List 型を使うのが正解でしょう。こちらも先頭or末尾からの取得＆削除を排他的に行うことができます。</p><p>ついでに購入履歴も Redis にもたせておけばそこから、サイドバー(<code>recent_sold</code>)とCSV吐き出しもどちらも行えそうだなと思いました。</p><p>ここまででとりあえずこの購入トランザクションだけでも Redis にうつしたら DB ロックする必要がないのでだいぶ良さそうだなと思い、redisブランチやりますとチームに宣言します。</p><h4>書き換えの流れ</h4><p>そしてもりもり書き換えました。</p><ul><li><code>POST /admin</code> でMySQLにデータを流し込んだあとに stock のデータをすべて redis にコピーする。(<code>stock:{variation_id}</code> というキーのSet)</li><li><code>POST /buy</code> で対象の Set から一つ取り出し、<code>order_history</code> という List にアーティスト名などの付属情報込みな辞書情報をPush。</li><li>サイドバーは <code>order_history</code> から最新10件を取得するように変更</li><li>CSV書き出しは <code>order_history</code> をまるっと書き出す感じ</li><li>その他もろもろテンプレに渡してるデータをよしなに変更</li></ul><p>といった感じですが、アプリのテストコードがないのでだいぶ変更が手探りな感じでつらかったです。とくにテンプレ周り。なおしてベンチ止まって、ベンチのエラー見て修正という…。 そんなつらいかんじや実際の作業内容は <a href=\"https://github.com/kayac/isucon2/commits/redis\">redis ブランチのコミットログ</a>を参照いただくと分かるかなと思います。</p><h4>他になんかあるか？</h4><p>コード見てるだけだとわからなかったので fujiwara さんにボトルネック探してもらいつつ、自分はとくにやることもないので非同期の実装を模索しておりました。 この時点ではforkモデルの限界なんじゃなかろうかと思っていて非同期にしてベンチ取ってみるか、みたいな感じでしたが、Perlで非同期にすると書き直しになるし、nodeの実装いじっててもうまく動かなくてすぐにあきらめてしまったんですが、それは fujiwara さんがテンプレのレンダリングボトルネックを見つけてくれて、そちらを直したら今までのアプリでも十分スループット（reverse proxy &lt;-&gt; app 間）が出ており、非同期全然意味ありませんでした。</p><p>まぁそうだよね、IOウェイトが問題になるような場合以外は非同期意味ないなーとそのとき思った次第です。</p><h4>テンプレキャッシュ</h4><p>組長が見つけてくれたチケットの座席表のレンダリングのボトルネック。これも Redis でキャッシュするようにしました。 Redis は単純なKVSとしてみても十分高速なのでこういう用途にも使えます。</p><h4>データ永続化</h4><p>これは本家ドキュメントよくまとまっております。</p><blockquote><p><a href=\"http://redis.io/topics/persistence\">http://redis.io/topics/persistence</a></p></blockquote><p>スナップショット(dump)と追記ログ(appendlog - MySQLのbinlog的な)の二種類の永続化方法があり、dumpはバックアップ用、復元をappendlogから、ってのがオススメな方法。</p><p>appendlog は基本的にはプロトコルログなんですが、大きくなるとバックグラウンドで最適化されて小さくなります。デフォルトでは fsync が1秒ごとに走るので最悪そこまでのデータは保全される。 書き込み毎に sync って言うのも設定でできますがパフォーマンス的につらいことになるでしょう。</p><p>これがISUCONのレギュレーションを満たしているかは定かではありませんがとりあえず fujiwara 組では1秒fsyncなappendlogでデータ永続化をしました。</p><p>また、メモリいっぱい使い切っているような大きなデータセットの場合に appendlog するは不安感ありますが、自分もまだ試したことがないので、近いうちに試したいと思っております。</p><h4>まとめ</h4><p>あんまりおすすめしまくっていると勘違いしちゃう人もいるかもしれないのでいちおう補足しておきますが、単純に MySQL を Redis に置き換えたら速くなる、っていうことはないです。 MySQLがいいところ、Redisがいいところ、（もちろんその他のツールも）どちらもあるので、 Pros and Cons やトレードオフを考えた上で選択するのが大事です。</p><p>僕自身も Redis つかっているといっても運用上のノウハウなどまだまだうちも足りていないのでそこはこれから精進していきたいと思います。</p><p>しかし、ISUCON楽しいですね。 #isucon のログによると</p><pre><code>11:47 &lt; typester&gt; すでにだいぶたのしい
</code></pre><p>といっており、ここからずーーーっと終了までたのしかったですね。</p><p>あと珈琲ありがとうございました！</p><h4>番外: Xslate の速さを実感</h4><p>家帰って他の言語の実装をうごかしてみると、明らかに座席表のレンダリングが遅いんです。ブラウザで見てボトルネックって分かるレベル。 でも、Perl の実装をブラウザで見た人はあのページの遅さはテンプレートエンジンじゃなくてブラウザがレンダリングするのに時間かかってる、くらいにしか感じない気がする。 今回の罠は Xslate の速さと言っても良いのではないでしょうか。</p><p>これは gfx++ といわざるを得ませんね！</p>
") (dc:creator nil "typester") (pubDate nil "Tue, 06 Nov 2012 23:46:00 GMT") (category nil "isucon, life, redis"))) ("コマンドラインでネットワーク設定のネットワーク環境のところを変える" "<p>ネットワーク周りの設定は <code>networksetup</code> コマンドでいろいろできるみたいで、 man をみるとどうも環境設定でできることはほとんどここからもできる模様。</p><p>んで、ネットワーク環境というのは</p><pre><code>-listlocations
List all network locations.
-getcurrentlocation
Display the name of the current set.
-createlocation location [populate]
Create a set with the user-defined-name name and optionally populate it with the default services.
-deletelocation location
Delete the set.
-switchtolocation location
Make the specified set the current set.
</code></pre><p>この辺が該当するようだ、切り替えるだけなら</p><pre><code>$ networksetup -switchtolocation Hoge
</code></pre><p>で OK。</p>" "http://unknownplace.org/memo/2012/10/31/1/" (20624 32836) new 15 nil nil ((title nil "コマンドラインでネットワーク設定のネットワーク環境のところを変える") (link nil "http://unknownplace.org/memo/2012/10/31/1/") (description nil "<p>ネットワーク周りの設定は <code>networksetup</code> コマンドでいろいろできるみたいで、 man をみるとどうも環境設定でできることはほとんどここからもできる模様。</p><p>んで、ネットワーク環境というのは</p><pre><code>-listlocations
        List all network locations.

-getcurrentlocation
        Display the name of the current set.

-createlocation location [populate]
        Create a set with the user-defined-name name and optionally populate it with the default services.

-deletelocation location
        Delete the set.

-switchtolocation location
        Make the specified set the current set.
</code></pre><p>この辺が該当するようだ、切り替えるだけなら</p><pre><code>$ networksetup -switchtolocation Hoge
</code></pre><p>で OK。</p>
") (dc:creator nil "typester") (pubDate nil "Wed, 31 Oct 2012 01:35:00 GMT") (category nil "osx"))))