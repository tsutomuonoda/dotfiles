;; -*- coding: utf-8 -*-
(("Matzにっき" nil "http://www.rubyist.net/~matz/" (20813 17236 334304 450000) feed 0 nil nil ((title nil "Matzにっき") (link nil "http://www.rubyist.net/~matz/") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/"))) (description nil) (dc:creator nil "Yukihiro -matz- Matsumoto") (dc:rights nil "Copyright 2011 Yukihiro -matz- Matsumoto <matz@ruby-lang.org>, copyright of comments by respective authors") (items nil (rdf:Seq nil (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20110929.html#p01"))) (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20101114.html#p01"))) (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20101113.html#p01"))) (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20101112.html#p01"))) (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20100624.html#p03"))) (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20100624.html#p02"))) (rdf:li ((rdf:resource . "http://www.rubyist.net/~matz/20100624.html#p01"))))))) ("RubyConf 2011 New Orleans" "一年ぶりの更新か。「年刊Matzにっき」だな。 今年もニューオーリンズで開催されたRubyConf。同じ都市で二度開催は初めて。 で、しょっぱなが私のキーノート。 まあ、あんまり語ることはないので。スライドを見てもらおうか。 Ruby everywhere View more presentations from yukihiro_matz こんな感じ。 角谷さんオススメのspeakerdeck.comも使ってみた。" "http://www.rubyist.net/~matz/20110929.html#p01" (20104 4380) new 1 nil nil ((link nil "http://www.rubyist.net/~matz/20110929.html#p01") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20110929.html#p01"))) (dc:date nil "2011-10-02T16:22:04+09:00") (title nil "RubyConf 2011 New Orleans") (dc:creator nil "Yukihiro -matz- Matsumoto") (description nil "一年ぶりの更新か。「年刊Matzにっき」だな。 今年もニューオーリンズで開催されたRubyConf。同じ都市で二度開催は初めて。 で、しょっぱなが私のキーノート。 まあ、あんまり語ることはないので。スライドを見てもらおうか。 Ruby everywhere View more presentations from yukihiro_matz こんな感じ。 角谷さんオススメのspeakerdeck.comも使ってみた。") (content:encoded nil "<h3>RubyConf 2011 New Orleans</h3><p>一年ぶりの更新か。「年刊Matzにっき」だな。</p><p>今年もニューオーリンズで開催されたRubyConf。同じ都市で二度開催は初めて。</p><p>で、しょっぱなが私のキーノート。</p><p>まあ、あんまり語ることはないので。スライドを見てもらおうか。</p><p><div style=\"width:425px\" id=\"__ss_9506323\"><strong style=\"display:block;margin:12px 0 4px\"><a href=\"http://www.slideshare.net/yukihiro_matz/ruby-everywhere\" title=\"Ruby everywhere\" target=\"_blank\">Ruby everywhere</a></strong><iframe src=\"http://www.slideshare.net/slideshow/embed_code/9506323\" width=\"425\" height=\"355\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe><div style=\"padding:5px 0 12px\"> View more <a href=\"http://www.slideshare.net/\" target=\"_blank\">presentations</a> from <a href=\"http://www.slideshare.net/yukihiro_matz\" target=\"_blank\">yukihiro_matz</a></div></div></p><p>こんな感じ。</p><p>角谷さんオススメのspeakerdeck.comも使ってみた。</p><p><script src=\"http://speakerdeck.com/embed/4e880de1536f230053005e7f.js?size=preview\"></script></p><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20110929.html#c\">ツッコミを入れる</a></p>"))) ("RubyConf 2010 キーノート(3)" "で、最後に「Diversity(多様性)」である。 初日のDave Thomasのキーノートでも3つの重要なこととして、 Diversifyをあげていた。多様性は重要なのである。 とはいえ、多様性はいいことばかりでもない。 Rubyにおける多様性といえば、昨今数々登場している別実装である。 CRuby (1.9, 1.8) JRuby Rubinius IronRuby MacRuby MagLev などなど、多くのRuby実装がある。これら以外にも「Rubyっぽい言語」まで含めると 本当にいくつあるのか見当もつかない。 昔はPythonの人たちに「Ruby(とPerl)は複雑すぎて、別実装は登場しそうにない。 Python.." "http://www.rubyist.net/~matz/20101114.html#p01" (19682 16124) new 2 nil nil ((link nil "http://www.rubyist.net/~matz/20101114.html#p01") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20101114.html#p01"))) (dc:date nil "2010-11-16T17:21:16+09:00") (title nil "RubyConf 2010 キーノート(3)") (dc:creator nil "Yukihiro -matz- Matsumoto") (dc:subject nil "Ruby") (description nil "で、最後に「Diversity(多様性)」である。 初日のDave Thomasのキーノートでも3つの重要なこととして、 Diversifyをあげていた。多様性は重要なのである。 とはいえ、多様性はいいことばかりでもない。 Rubyにおける多様性といえば、昨今数々登場している別実装である。 CRuby (1.9, 1.8) JRuby Rubinius IronRuby MacRuby MagLev などなど、多くのRuby実装がある。これら以外にも「Rubyっぽい言語」まで含めると 本当にいくつあるのか見当もつかない。 昔はPythonの人たちに「Ruby(とPerl)は複雑すぎて、別実装は登場しそうにない。 Python..") (content:encoded nil "<h3>RubyConf 2010 キーノート(3)</h3><p>で、最後に「Diversity(多様性)」である。</p><p>初日のDave Thomasのキーノートでも3つの重要なこととして、
Diversifyをあげていた。多様性は重要なのである。</p><p>とはいえ、多様性はいいことばかりでもない。
Rubyにおける多様性といえば、昨今数々登場している別実装である。</p><ul><li>CRuby (1.9, 1.8)</li><li>JRuby</li><li>Rubinius</li><li>IronRuby</li><li>MacRuby</li><li>MagLev</li></ul><p>などなど、多くのRuby実装がある。これら以外にも「Rubyっぽい言語」まで含めると
本当にいくつあるのか見当もつかない。</p><p>昔はPythonの人たちに「Ruby(とPerl)は複雑すぎて、別実装は登場しそうにない。
Pythonを見てみろ、CPythonとJytonとIronPythonがある」などと言われたものだが、
今や別実装の数ではRubyの方がしのいでいる。Pythonの方もPyPyとか新しいものも登場してるが。</p><p>が、一方、このような多様性にはコストがかかる。
まあ、プラットフォームの違うJRubyはおいておくとしても、
CRubyとRubiniusとMacRubyで分散しているリソースを集約すれば、
もっと早く言語(実装)が進歩するような気もしないでもない。</p><p>しかし、オープンソースプロジェクトでは結局はそれぞれの参加者がやりたいように関わって
モチベーションを維持することの方がはるかに重要だ。</p><p>多様性は善で、コストは必要経費であるというのが私の認識である。</p><p>さて、多様性は善であるので、さらにそれを豊かにするために
私自ら新たな処理系を送り込もうと思う。</p><p>それは RiteVM であり、組み込みなど小規模なデバイス向けをターゲットとした処理系である。</p><p>現在のRubyは元々Unixをベースにして開発されたものであり、
UnixやPOSIX APIを提供しないような小さなデバイスや、
アプリケーションへの組み込みなどはあまり重視されてこなかった。</p><p>しかし、一方、組み込み分野などではデバイス性能の向上で
ソフトウェアの比重が高まりつつあり、
実行速度やリアルタイム性がそれほど要求されない分野で
Rubyのような「高級」な言語を使いたいという要求はそれなりにあるようだ。</p><p>そこで、以下のような処理系を新規に開発する</p><ul><li>小規模なRuby言語処理系</li><li>機能はほぼRuby標準規格を満たす最小限。
    さらにファイルI/Oなどは取り除く(後で追加可能)</li><li>実装はLuaを意識</li><li>VM構造体を提供。グローバル変数を使わない</li><li>機能はコンポーネントとして提供。必要に応じて外せる。
    たとえばコンパイラを外してevalもなし、などが実現できる</li><li>ターゲットの要求に合わせてコンパイル時にさまざまに設定可能。
    たとえば浮動小数点数をdoubleにするかfloatにするか、
    Fixnumをintにするか、longにするか、long longにするか、など。
    逆にいうと「どこでも同じように動く」は追求しない</li><li>浮動小数点数はimmediate(shootout対策w)。</li><li>VMは32ビットワード命令、レジスタベース。命令セットもLuaに類似。</li><li>GCはレイテンシを重視。インクリメンタルアルゴリズムを採用。
    世代別についても検討したい</li></ul><p>このVM開発のプロジェクトコードネームは Rite と称することにする。
RiteVMの開発は、経済産業省 平成22年度「地域イノベーション創出研究開発事業」の一環として行われる。</p><p>これにより、たとえば</p><ul><li>ゲームの組み込みスクリプト</li><li>デジタル家電のソフトウェア開発</li><li>組み込み機器やロボットの非リアルタイム制御</li></ul><p>などにRuby(のサブセット)が使えるようにする。</p><p>もちろん、今すぐにそうなるとは思っていないが、
今から準備すれば数年後には現実にできると考えている(ビジネス上の成功は別だけど）。</p><p>と、ぶちあげてしまったので、もう後に引けなくなったな。</p><h4>FAQ</h4><dl><dt>いつ Rite が使えるようになるの？</dt><dd>
わかりません。が、上述の通り、経済産業省の事業なので事業が終了する2011年度末には
なんらかの成果をあげないと、いろいろまずいことに...。
</dd><dt>RiteVMはオープンソースになるの？</dt><dd>
はい。MITライセンスを考えています。ただし、今回(とその周辺)の開発で
ビジネスモデルを確立する必要があるので、あるいはGPL＋商用ライセンスの
MySQLモデルになるかもしれません。
いずれにせよ、オープンソースになることは期待して良いでしょう。
</dd><dt>RiteVMが登場したらCRubyはお蔵入り？</dt><dd>
そんなことはありません。Riteは分野限定の小規模実装ですから、
フル機能実装であるCRubyの代替にはならないでしょう。
</dd><dt>C APIはどうなるの？</dt><dd>
今までのCRubyのAPIとは異なるものになります。CRubyのAPIは非常に使いやすいけれども
組み込みにはあまり向かないからです。技術的には不可能ではなさそうですが、
互換レイヤーを導入する予定は当面ありません。
</dd><dt>RiteVMはM17Nを提供しますか？</dt><dd>
いいえ、コンパイル時にASCIIかUTF-8を選択してください。
エンコード変換機能も(標準では)提供しません。
</dd><dt>native threadをサポートしますか？</dt><dd>
いいえ、RiteVMそのものはスレッドをサポートしません。
native threadを活用したい時には各スレッドにVMを割り当ててください。
fiberはVMで提供するかもしれませんが、予定は未定です。
</dd><dt>RiteVMはYARV/JRuby/Rubiniusより高い性能が出ますか？</dt><dd>
たぶんそんなに性能は出ません。ただし、Floatの即値化とかのおかげで
いくつかのベンチマークでは良い性能がでるかもしれません。
</dd><dt>RiteVMの開発に貢献できますか？</dt><dd>
オープンソース化されるまで待ってください。
githubで公開されると思います。gitの勉強しないとな
</dd><dt>Riteって聞いたことあるんだけど</dt><dd>
2003年のRubyConfキーノートでRuby 2.0の実装コードネームとして提案した名称です。
結局、新しいVMはYARVが採用されたわけですが、まさかこんな形で復活するとは。
</dd><dt>まつもとさんはCRubyの開発から引退するんですか？</dt><dd>
今でも十分貢献できてないんですが、引退するつもりはありません。
CRubyはRubyの第一実装であり続けますし、
私もRubyの設計者であり、コミュニティーのリーダーであり続けます。
</dd></dl><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20101114.html#c\">ツッコミを入れる</a></p>"))) ("RubyConf 2010 キーノート(2)" "前回に続いて 未来(≒Ruby 2.0)の話を。 今回、紹介した「未来」の機能は以下の通り。 Traits Method Combination Keyword arguments Namespaces 今まで話してきたことじゃん、と思うでしょうが、その通り。 違いは これらの機能が単なるアイディアではなく、どのように実装すべきかほぼ見えている 実装した機能を突っ込む場所(trunk)が明確になっている 点です。特に後者は大きい。 Traits Traitsの定義は a trait is a collection of methods, used as a \"simple conceptual model for structuring object oriented programs\". from Wikipedia.." "http://www.rubyist.net/~matz/20101113.html#p01" (19681 19786) new 3 nil nil ((link nil "http://www.rubyist.net/~matz/20101113.html#p01") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20101113.html#p01"))) (dc:date nil "2010-11-16T00:10:02+09:00") (title nil "RubyConf 2010 キーノート(2)") (dc:creator nil "Yukihiro -matz- Matsumoto") (dc:subject nil "Ruby") (description nil "前回に続いて 未来(≒Ruby 2.0)の話を。 今回、紹介した「未来」の機能は以下の通り。 Traits Method Combination Keyword arguments Namespaces 今まで話してきたことじゃん、と思うでしょうが、その通り。 違いは これらの機能が単なるアイディアではなく、どのように実装すべきかほぼ見えている 実装した機能を突っ込む場所(trunk)が明確になっている 点です。特に後者は大きい。 Traits Traitsの定義は a trait is a collection of methods, used as a \"simple conceptual model for structuring object oriented programs\". from Wikipedia..") (content:encoded nil "<h3>RubyConf 2010 キーノート(2)</h3><p><a href=\"http://www.rubyist.net/~matz/20101112.html#p01\">前回</a>に続いて
未来(≒Ruby 2.0)の話を。</p><p>今回、紹介した「未来」の機能は以下の通り。</p><ul><li>Traits</li><li>Method Combination</li><li>Keyword arguments</li><li>Namespaces</li></ul><p>今まで話してきたことじゃん、と思うでしょうが、その通り。
違いは</p><ul><li>これらの機能が単なるアイディアではなく、どのように実装すべきかほぼ見えている</li><li>実装した機能を突っ込む場所(trunk)が明確になっている</li></ul><p>点です。特に後者は大きい。</p><h4>Traits</h4><p>Traitsの定義は</p><blockquote><p>a trait is a collection of methods, used as a \"simple conceptual model for structuring object oriented programs\".</p><p>from Wikipedia (en)</p></blockquote><p>ということで、モジュールとほぼ同じようなものです。
実際、今回導入するTraitsは言語要素の実体としてはモジュールを利用します。</p><p>ただ、モジュールの機能を取り込むのにincludeではない
別のやり方(mix)を導入することによって、includeが持ついくつかの問題を解消しよう
というものです。includeの方が便利なこともあるので、includeもなくなりません。</p><p>includeの問題は</p><ul><li>名前の重複を検出できないこと</li><li>モジュールのinclude関係が後から変化した場合の一貫性のない挙動</li><li>メソッドを後から修飾する(wrapする)方法が提供されない</li></ul><p>ことです。</p><p>擬似的な多重継承であるincludeは、
includeされたモジュールが継承ライン(ancestors)に含まれるようになります。
この時、状況によっては予測困難なことが発生します。</p><p>ひとつはincludeされた複数のモジュールで同名のメソッドが定義されていた場合、
その重複が意図されたもの(override)か、偶然か(conflict)か、
区別する手段がないところです(名称重複問題)。</p><p>もうひとつは、いくつかの状況で継承ラインに並ぶモジュールの順序が予測しがたい
(ので、メソッド名の重複時にどれが優先になるのか直感的でない)ことです。</p><pre>module American
  attr_accessor :address
end
module Japanese
  attr_accessor :address
end
class JapaneseAmerican
  include American
  include Japanese
end
JapaneseAmerican.new.address
# which address?
p JapaneseAmerican.ancestors
# =&gt; [JapaneseAmerican, Japanese, American, Object, Kernel]</pre><p>この例ではaddressという属性(メソッド)がAmericanとJapaneseの間で
重複していますが、これが意図的な重複なのか偶然かは言語にはわかりません。
継承ラインの順にしたがってメソッドを呼び出すだけです。</p><p>実際にはJapaneseモジュールが優先されてそのaddressメソッドが呼ばれるのですが、
ひとめでそれが分かるのは、だいぶ「訓練されたRubyist」です。</p><p>現在のRubyでは、includeされた時、
「スーパークラスですでにそのモジュールがincludeされていた時には
二重にincludeしない」という挙動になっています<span class=\"footnote\">*1</span>。ですから、
スーパークラスでincludeされていることに気がつかなかった場合、
includeしても継承ラインのその場所にモジュールが登場しなかった
ということが起こりえます。</p><p>それから、モジュールが既にincludeされてから、
そのモジュールに対してincludeを行った場合、
既に存在するクラスの継承ラインには新たにincludeされるようになったモジュールは含まれません。
つまり、includeのタイミングによって継承ラインへの反映のされ方が異なるわけです。
ちょっと気持ち悪いです。</p><p>これらを(ある程度)解決する手段がmixメソッドです。</p><p>mixメソッドをincludeの代わりに使うと、</p><ul><li>現在モジュールに定義されているメソッドを
    クラス/モジュールに注入する</li><li>mixされたモジュールは継承ラインに登場しない</li><li>メソッド名の重複は例外になる</li><li>例外がイヤならモジュールを書き換える、
    または重複したメソッドの名称を変更する</li><li>定数を取り込むかどうかを指定できる。
    デフォルトは取り込まない</li></ul><p>という振舞いになります。これにより</p><ul><li>名称の重複はエラーになるので、見逃しがない</li><li>名称変更ができるので、明示的に解消できる</li><li>あくまでも「現時点での状態の注入」なので、
    継承ラインが変化した時の「おかしさ」がない。
    問題は解決していないが、気分は良い(苦笑)</li></ul><p>ということが実現できます。</p><p>たとえば以下のようなコードでは</p><pre>module American
  attr_accessor :address
end
module Japanese
  attr_accessor :address
end
class JapaneseAmerican
  mix American
  mix Japanese  # =&gt; address conflict!
end</pre><p>addressメソッドが重なっているからmixできません。
無事mixさせるためには名称衝突を明示的に回避します。</p><pre>class JapaneseAmerican
  mix American, :address =&gt; :us_address
  mix Japanese, :address =&gt; :jp_address
end</pre><p>これで、addressという名前による重複はなくなりました。</p><p>なぜ、includeにオプションをつけるのではなく、
新しいメソッドを導入して言語をより複雑にするかというと、
個人的にmixの挙動の方が望ましいと思っていて、
ユーザーをそちらに誘導するためには、より短い名前の方が望ましいと思ったからです。</p><p>Traitsを実現するmixメソッドの実装ですが、
RubyKaigiでこれを紹介したその日には中田さんが着手していて、
パッチは完成しているそうです。</p><p>ただ、各種プレゼンテーションでは説明しなかった以下の課題があり、
これらについては結論を出す必要があります。</p><ul><li>mixされるモジュールが別のモジュールをincludeしていた場合にはどうなるか。
    おそらくは例外になる。mixとincludeは混ぜるべきではない。</li><li>mixで別名を付けて問題解決、と読めるような言い方をしているが、
    実際にはモジュール内部で名前を書き換える前のメソッドを読んでいる可能性がある。
    それをどうするか。なにもしない(重複する方が悪い)とする考えもあるが、
    それだとせっかく苦労してTraitsを導入しようとしているのが
    まったく無駄になるので、名前を書き換えたメソッド呼び出しを
    モジュールのメソッド定義実体から探し出してメソッドをコピーする
    という(Bertrand MayerのOOSCに記述されていたアイディア)を導入することを考える</li><li>インスタンス変数の名称重複を解決する手段がない。
    これはサブクラスからは見えないインスタンス変数を導入し、
    mix対象のクラスではそちらを使うこと推奨とするべきではないかと
    考えています。1.9向けのパッチは既に書いてありますが、
    プライベートなインスタンス変数の記法を @_fooをにするか、@__fooにするか、
    はたまたまったく違うナニかを考えるのかが難しくて現状では放置されています。
    mixが導入されたらより必要になるでしょうね。</li></ul><h4>Method Combination</h4><p>RubyKaigiではmixの一部として導入する話をしていたMethod Combinationだが、
mixでいちいち「どのメソッドをラップするか」とか指定するのが以上にめんどくさいことに
後で気がつきました。ので、分離。</p><p>今回の案はprependというメソッドを導入すること。「include、mixに続いて
またもうひとつ？」という声が聞こえてきそうだが、私もそう思います。でも必要なのよ。</p><p>prependはそのモジュールが提供する機能を、現在のクラス/モジュールの「前」に
追加する機能。</p><pre>module Foo
  def foo
    p :before
    super
    p :after
  end
end
class Bar
  def foo
    p :foo
  end
  prepend Foo
end
Bar.new.foo # :before, :foo, :after</pre><p>とように使う。prependしたモジュールFooで定義されたfooメソッドが、
prepend先のメソッドfooをラップしているのが分かるでしょうか。</p><p>prependメソッドは、RailsコミッタでもあるYehuda Katzの提案で、
これがあればRailsのalias_method_chainを撲滅できる、と息巻いていた。
私もそう思う。</p><p>具体的な実装はまだないんだけど、たぶんT_ICLASSのようなものを
継承チェーンに置いて、そっちを先に検索するようにするんじゃないかなあ。</p><h4>Keyword Arguments</h4><p>引数、特にオプショナル引数がどんな働きをするのか忘れる人は私だけじゃないと思います。
たとえば、 public_instance_methods メソッドはオプショナル引数を受け付けるのだけど、
それが「オプショナル引数を付けると、それが真であった時にスーパークラスのメソッドを含む」のか、
それとも逆かというのは私でもいつも忘れてしまいます。正解はfalseを付けた時に含まない。</p><p>これをたとえば</p><pre>aClass.public_instance_methods(include_super: false)</pre><p>と書けたら、ずっと覚えやすくなるというものです。</p><p>Rubyのキーワード引数は、1.9で追加されたシンボル記法のハッシュが
引数リストの末尾に付いているだけです。</p><p>2.0で新たに追加されたのは、メソッド定義側でこれを簡単に受け取れる記法です。</p><p>例としてはこんな感じ。</p><p>呼び出し側</p><pre>1.step(by: 2, to: 20) do |i|
  p i
end</pre><p>呼び出され側</p><pre>def step(by: step, to: limit)
  ...
end</pre><p>後、「**」で辞書形式で受けとるとか、ちょっとした機能追加もありますが、
基本的にはこれだけ。</p><h4>Namespace</h4><p>技術的な詳細などについては同じRubyConfで前田(修吾)くんが<a href=\"http://www.slideshare.net/ShugoMaeda/rc2010-refinements\">発表したスライド</a>を見てもらった方が良いと思います。</p><p>Rubyではopen classといって既存のクラスの定義を書き換えちゃうことができる。
メソッドの追加も自由自在だ。このように既存のクラスに「パッチ」を当てちゃう技法のことを
「Monkey Patching」と呼ぶことも多い。</p><p>これは「ゲリラ・パッチング」→「ゴリラ・パッチング」→「モンキー・パッチング」と
変化して生まれた用語なんだって。
まあ、Rubyはクラスなんてものは変化するもんじゃないって「硬い」言語よりも
大きな自由を提供してることは確かだよね。
DHHは今回のRubyConfのキーノートで「今後はMonkey PatchingじゃなくてFreedom Patchingと呼ぼう」と
叫んでた。メル・ギブソンの『ブレーヴハート』を引用しつつ。「ふりーだーーむ」。</p><p>まあ、フリーダムなのは素晴らしいことなんだけど、影響力が大きすぎるというのもまた事実。
やろうと思えば整数のプラスメソッドを書き換えて、1+2 = 42 のような変更だってできちゃうから。
でも、大抵のプログラムは副作用でまともに動作しなくなるよね。</p><p>で、問題はこのような変更の影響の範囲がグローバル(プログラム全体)であることで、
仮にこのような修正をなんらかの「スコープ」に閉じ込めることができたなら、
もっと安全に、もっと安心して「フリーダム・パッチング」を活用できる、はず。</p><p>そのような「スコープ」のために、昔からClassboxとかSelector Namespaceとかが提案されてきた
のですが、今回、前田くんが実装したのはSelector Namespaceの一種であるRefinment。</p><p>たとえば、以下のようなプログラムがあったとします。っていうか、あります。</p><pre>class Integer
  def /(other)
    return quo(other)
  end
end
p 1/2 # =&gt; (1/2)</pre><p>これは割り算演算子(/)を再定義して、整除ではなく結果を有理数にしようもので、
標準添付ライブラリの mathn の本質部分です。
しかし、整数の割り算の結果が整数であることを期待しているコードは当然存在するわけで、
そのようなコードは上のような変更で破綻する可能性があります。</p><p>そこで今回導入しようというのがrefinmentです(呼び名は変わるかもしれません)。
文法としては以下のようになります。</p><pre>module MathN
  refine Integer do
    def /(other)
      return quo(other)
    end
  end
  p 1/2 # =&gt; (1/2)
end
p 1/2   # =&gt; 0</pre><p>Refinementの単位としてはモジュールを使います。またモジュールです。大活躍ですね。</p><p>モジュールの中では既存のクラスをrefineできます。
refineの中で定義された修正はそのrefinment(ネームスペース)の中でだけ有効です。
ですから、MathNモジュールの中では 1/2 は有理数の (1/2) であり、
その外側では今まで通り整除になっています。有効範囲はレキシカルであり、
Refinmentはブロックの外側には影響を与えません。</p><p>Classboxとの違いは、そこを通じて呼び出された先(レキシカルスコープの外)に
「置き換え」が影響を与えるかで、いろいろ検討した結果、
多くのプログラミング言語がダイナミックスコープをあきらめたのと同様の理由で
「置き換え」はレキシカルになるべきだとの結論を出しました。</p><p>モジュールとして実現されたネームスペースを使うには usingメソッドを使います。
こんな感じ。</p><pre>module Rationalize
  using MathN
  p 1/2 # =&gt; (1/2)
end
p 1/2 # =&gt; 0</pre><p>これでRationalizeモジュールの中ではMathNが提供するRefinementが利用できます。</p><p>さらに、今までメソッドの中でメソッドをネストして定義した場合、
そのメソッドはクラスに直接定義されてあんまり意味ないじゃん、みたいな状態になっていたのですが、
今後はそのメソッドの範囲内でだけ有効なRefinementにネストの内側のメソッドが定義されるので、
完全にプライベートなメソッドとして使うことができます。</p><pre>class Foo
   def foo
      def bar
        ...
      end
      bar # 呼べる
   end

   def quux
     bar  # 呼べない
   end
end</pre><p>この変更はかなり大規模かつ複雑なものですが、前田くんのところでは実際に動作しています。
早く trunk に突っ込みたいものです。しかし、NaCl取締役の激務をこなしつつ、
こんなスーパーなパッチを作っちゃう前田くんに拍手。</p><h4>まとめ</h4><p>歴史編で見てきた通り、ずっと昔からキーワード引数などについて話してきましたが、
とうとう現実になりそうです。長かった。</p><div class=\"footnote\"><p class=\"footnote\">*1&nbsp;  MacRubyでは違うらしい。Ruby 1.9でそのような変更をしたかったが、YARVが継承ラインに同じモジュールが2度登場しないことを前提にしていたため断念 
</p></div><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20101113.html#c\">ツッコミを入れる</a></p>"))) ("RubyConf 2010 キーノート(1)" "New Orleansで開催されているRubyConf 2010に来ています(執筆時点では既に終了)。 で、今回のRubyConfはキーノートが3つもあるという豪華版でした。 ひとつは1日目最初のDave Thomasによるもの、 次は2日目最初のDavid Heinemeier Hanssenによるもの、 最後が2日目最後の私によるものです。 他のキーノートは、それぞれ感動的で素晴らしかったのですが、 その辺は他の方のレポートにお任せしようと思います。 そのうち、confreaksからビデオも公開されるだろうし。 で、今回は私のキーノートで発表した内容の紹介と その解説をしてみよう.." "http://www.rubyist.net/~matz/20101112.html#p01" (19680 31579) new 4 nil nil ((link nil "http://www.rubyist.net/~matz/20101112.html#p01") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20101112.html#p01"))) (dc:date nil "2010-11-15T09:14:19+09:00") (title nil "RubyConf 2010 キーノート(1)") (dc:creator nil "Yukihiro -matz- Matsumoto") (dc:subject nil "Ruby") (description nil "New Orleansで開催されているRubyConf 2010に来ています(執筆時点では既に終了)。 で、今回のRubyConfはキーノートが3つもあるという豪華版でした。 ひとつは1日目最初のDave Thomasによるもの、 次は2日目最初のDavid Heinemeier Hanssenによるもの、 最後が2日目最後の私によるものです。 他のキーノートは、それぞれ感動的で素晴らしかったのですが、 その辺は他の方のレポートにお任せしようと思います。 そのうち、confreaksからビデオも公開されるだろうし。 で、今回は私のキーノートで発表した内容の紹介と その解説をしてみよう..") (content:encoded nil "<h3>RubyConf 2010 キーノート(1)</h3><p>New Orleansで開催されているRubyConf 2010に来ています(執筆時点では既に終了)。</p><p>で、今回のRubyConfはキーノートが3つもあるという豪華版でした。
ひとつは1日目最初のDave Thomasによるもの、
次は2日目最初のDavid Heinemeier Hanssenによるもの、
最後が2日目最後の私によるものです。</p><p>他のキーノートは、それぞれ感動的で素晴らしかったのですが、
その辺は他の方のレポートにお任せしようと思います。
そのうち、confreaksからビデオも公開されるだろうし。</p><p>で、今回は私のキーノートで発表した内容の紹介と
その解説をしてみようと思います。</p><p>ちなみにスライドは<a href=\"http://slidesha.re/9y2rQV\">SlideShareにアップ</a>しました。</p><p>今回のテーマは</p><ul><li>History (歴史)</li><li>Future (未来)</li><li>Diversity (多様性)</li></ul><p>でした。Matzにっきでは、これを3つに分けて紹介しようと思います。</p><p>今日はまず最初の「History」について。</p><p>RubyConfはもう今回で10回目になります。
最初は30人強で始まったRubyConfも、今回は800人を越える規模に成長しました。
っていうか、ここ数年は会場の都合などで500人規模で安定していたのですが、
あっという間にチケットが売り切れるありさまでした。昨年など24時間保たなかったようで、
いけるかな、などと悩んでいるともうダメという状況です。</p><p>今回は会場が広かったこともあって、チケットにもだいぶ余裕があったようです。</p><p>過去のRubyConfとそこでのキーノートを振り返ると、</p><dl><dt>2001 フロリダ州タンパ</dt><dd><p>記念すべき最初のRubyConfです。ACMのカンファレンス、OOPSLAの直前を狙って開催されました。
日本人は3名(私、高橋さん、青木さん)。この年は 911 の年でもあり、
また、フロリダは炭疽菌の騒ぎが起きた場所だったので、まわりに大変心配されました。
テレビのニュースではAnthrax(炭疽菌)という単語が繰り返し登場していました。</p><p>あと、フロリダでは父の古くからの知人のお宅にお邪魔したりして、
久しぶり(23年ぶり)の米国訪問は楽しい時間になりました。</p><p>この年のキーノートのタイトルは「Human-Oriented Programming in Ruby」で、
Rubyは人間にフォーカスしてるんだよ、みたいな話をしました。原点ですね。</p></dd><dt>2002 ワシントン州シアトル</dt><dd><p>2回目のRubyConfはSeattle.rbのお膝元シアトルで開催されました。
この時もOOPSLA直前開催です。
Seattle.rbの面々は、Aaron Pattersonはいなかったと思うけど、Eric HodelもRyan Davisも
すでに参加していました。Dan SugalskiがParrotの話をしたのもこの回だったような。</p><p>キーノートは「Be Minor, Be Cool」です。
クールなことはマイノリティからくる。
我々は(まだ)あまり知られていないかもしれないけどクールなことをしようじゃないか
という呼びかけです。</p></dd><dt>2003 テキサス州オースチン</dt><dd><p>この時も(この回まで)OOPSLA直前だったような気がします。
思い出されるのは、RubyConf前に Texus A&amp;M Universityを訪問して
Bjarne Stroustrupと時間を過ごしたことです。
個人的に私が C++ についてどう思っているか、ということは置いておいて
Bjarneは素晴らしい人格と素晴らしい頭脳の持ち主です。とっても親切でした。</p><p>この時のキーノートは「Visions for the Future, or How Ruby Sucks」です。
Ruby 2.0がどうなるか、なんて話をこんなに前からしてたんですね。
M17Nや鬼車、あと定数の検索順序のようなその後1.9で実現されたものもあれば、
ローカル変数のスコープのように、悩んだ挙句結局変更しないことにしたものもあり、
キーワード引数やSelector Namespaceのように、やっと実現のめどがついたものなどが
もう7年も前にそうとう詳しく述べられています。</p><p>ここで紹介されたアイディアの中にはprivate instance variable(サブクラスから見えないインスタンス変数)のような、秀逸ながら文法が決まらずお蔵入りのものもありました。手元にはパッチもあるんですよねえ。</p></dd><dt>2004 バージニア州シャンティ</dt><dd><p>Chantillyは「シャンティ」と発音するようですね。</p><p>実はこの回は出席できていないんです。ちょうど末娘の誕生のころで、
さすがに臨月の妻をおいてアメリカへ行くのははばかられました。
この回は、笹田くんがYARVの発表をしています。
非常に好評だったと聞いています。キーノートはObjecive-Cの作者 Brad Cox が
してくださったそうです。もっとも Objective-C については全く言及しなかったようですが。</p></dd><dt>2005 カリフォルニア州サンディエゴ</dt><dd><p>サンディエゴはあたたかくていいところでした。
ホテルもおしゃれでした。向こうでは、偶然知人のお父さんに会って
ディナーをご馳走になったりしました。</p><p>この年のキーノートは 「Visions for the Future, or Wild and Weird Ideas」で、
やっぱり未来に向けての「ワイルドなアイディア」について語っています。
keyword arguments, eval, lambda, annotations, traits, namespace, 
method combination, multilingualization などについて語っていますが、
こんなに昔からいろいろ考えていたのねと感心するべきか、
こんなに時間がたってもぜんぜん手付かずのものがこんなにあるのねとあきれるべきか。</p><p>後者なんでしょうね。</p></dd><dt>2006 コロラド州デンバー</dt><dd><p>なんかデンバーとっても寒かったです。会期中には雪が降ったし。
ホテルの駐車場でリスがうろうろしていたのが面白かったです。</p><p>この時のキーノートは「The Return of the Bikeshed or Nuclear Plant in the Backyard」
というテーマでした。言語設計はとっても楽しいからみんなも参加しようよ、
というような感じです。その後、いろんな人が参加してくれるかなと思ったのですが、
実際にはいまいち盛り上がりませんでした。やっぱ言語設計は敷居が高いんでしょうか。</p></dd><dt>2007 ノースカロライナ州シャーロット</dt><dd><p>東海岸です。2004年のバージニアを逃した私には、はじめての東海岸らしい東海岸です。
分類上は2001年のフロリダも東海岸ですが、東というよりも南という印象が強いですね。</p><p>この年は「Language Matters or Not」。プログラミングにおいて言語の果たす役割は大きい、
とかなんとか。あと恒例の新機能紹介も入ってます。
その後激論を呼び起こした「-&gt;(Stabby Lambda)」が公表されたのもこの時でしたね。
あの時はむしろ反対が多かったStabby Lambdaですが、みんなあきらめたのか
最近では文句をいう人はもうあまりいませんね。計算通り。</p></dd><dt>2008 フロリダ州オーランド</dt><dd><p>2度目のフロリダ州です。ディズニーワールドなどリゾート地の印象が強いオーランドですが、
ホテルはかなり世間と隔絶したところにあったので、集中できました。
ちょうど大統領選挙の激戦の最中だったので、「どっちを支持する」とか
真剣に聞かれて困りました。ところでプログラミング関係はリベラルで民主党支持の人が多いようですね。</p><p>この年のキーノートは「Reasons behind Ruby」です。
わりと原点に戻ったキーノートですね。Rails世代が増えてきてることを意識したキーノートです。
技術色が薄いので、あんまりおもしろくないと思った人も多かったかもしれません。</p></dd><dt>2009 カリフォルニア州サンフランシスコ</dt><dd><p>2009年RubyConfの会場は、シリコンバレーにほど近い、IT業界の中心地サンフランシスコです。
なんかRubyConfの前の日にInfoQが開催するQConでも
セッションを持ったりして忙しかった覚えがあります。</p><p>この年のキーノートは「The 0.8 True Language」です。
聞き慣れない表現ですが、指輪物語の「One True Ring」を意識しています。
すべてに向いた「One True Language」はなくとも
パレートの法則に従い80%をカバーする言語はありえるんじゃないか、
Rubyはそれに近いんじゃないか、とかいうような話です。</p></dd><dt>2010 ルイジアナ州ニューオーリンズ</dt><dd><p>今年はニューオーリンズです。実はニューオーリンズは松江市の姉妹都市なんですね。
だからどうということはありませんが、音楽が鳴り響く明るい感じの街で、
食べ物がおいしいのが素晴らしいです。カンファレンスご飯もおいしくて
参加者達がびっくりしていました(大抵は、食べれるけどそんなにおいしくない)。</p><p>そして今年のキーノートのテーマは「Future and Diversity」です。</p></dd></dl><p>続きは別エントリで。まず Future (≒Ruby 2.0) について、
そしてその次のエントリで Diversity (多様性) について解説します。</p><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20101112.html#c\">ツッコミを入れる</a></p>"))) ("大容量USBメモリ" "やっぱ、使えなさそう。 すごく遅い。書き込みで1.7MB/sくらい。PC内蔵のSATAが35MB/sくらい出てることを考えるとすごく遅い。 エラーが多い。ファイルを書き込んだら壊れてた。再度書いたら大丈夫だったファイルもあった。 エラーがすごく多いww 1GBくらいのファイルに複数回md5sumをかけると、5分以上かけて計算して、そのたびにMD5値が異なる。 しかし、こんな使い物にならないものを、誰がなんのために作るのか。 ネタになったからいいけど。" "http://www.rubyist.net/~matz/20100624.html#p03" (19491 28005) new 5 nil nil ((link nil "http://www.rubyist.net/~matz/20100624.html#p03") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20100624.html#p03"))) (dc:date nil "2010-06-24T23:36:21+09:00") (title nil "大容量USBメモリ") (dc:creator nil "Yukihiro -matz- Matsumoto") (description nil "やっぱ、使えなさそう。 すごく遅い。書き込みで1.7MB/sくらい。PC内蔵のSATAが35MB/sくらい出てることを考えるとすごく遅い。 エラーが多い。ファイルを書き込んだら壊れてた。再度書いたら大丈夫だったファイルもあった。 エラーがすごく多いww 1GBくらいのファイルに複数回md5sumをかけると、5分以上かけて計算して、そのたびにMD5値が異なる。 しかし、こんな使い物にならないものを、誰がなんのために作るのか。 ネタになったからいいけど。") (content:encoded nil "<h3>大容量USBメモリ</h3><p>やっぱ、使えなさそう。</p><ol><li>すごく遅い。書き込みで1.7MB/sくらい。PC内蔵のSATAが35MB/sくらい出てることを考えるとすごく遅い。</li><li>エラーが多い。ファイルを書き込んだら壊れてた。再度書いたら大丈夫だったファイルもあった。</li><li>エラーがすごく多いww  1GBくらいのファイルに複数回md5sumをかけると、5分以上かけて計算して、そのたびにMD5値が異なる。</li></ol><p>しかし、こんな使い物にならないものを、誰がなんのために作るのか。</p><p>ネタになったからいいけど。</p><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20100624.html#c\">ツッコミを入れる</a></p>"))) ("買い物" "上海の電気街(っていうか巨大なラジオ会館)のようなところで買い物。 携帯電話がカオス。Suny EricssonとかNCKIAとかいっぱいある。 あと、大量のiPhone風電話とか。 Androidで動くiPad風タブレットもあった。1500元。なぜかメニューが全部日本語。 帰りに容量500Gと書いてあるUSBメモリ(Sonyブランド)があったので、 値段を聞いたら100元(約1500円)だとか。 安すぎて、絶対にその容量はなさそうだけど、 話のタネにと思って購入。ねぎったら80元になった(！)。 ホテルに戻ってPCにつないだら、本当に524Gと表示された。びっくり。 この容.." "http://www.rubyist.net/~matz/20100624.html#p02" (19491 9542) new 6 nil nil ((link nil "http://www.rubyist.net/~matz/20100624.html#p02") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20100624.html#p02"))) (dc:date nil "2010-06-24T18:28:38+09:00") (title nil "買い物") (dc:creator nil "Yukihiro -matz- Matsumoto") (description nil "上海の電気街(っていうか巨大なラジオ会館)のようなところで買い物。 携帯電話がカオス。Suny EricssonとかNCKIAとかいっぱいある。 あと、大量のiPhone風電話とか。 Androidで動くiPad風タブレットもあった。1500元。なぜかメニューが全部日本語。 帰りに容量500Gと書いてあるUSBメモリ(Sonyブランド)があったので、 値段を聞いたら100元(約1500円)だとか。 安すぎて、絶対にその容量はなさそうだけど、 話のタネにと思って購入。ねぎったら80元になった(！)。 ホテルに戻ってPCにつないだら、本当に524Gと表示された。びっくり。 この容..") (content:encoded nil "<h3>買い物</h3><p>上海の電気街(っていうか巨大なラジオ会館)のようなところで買い物。</p><p>携帯電話がカオス。Suny EricssonとかNCKIAとかいっぱいある。
あと、大量のiPhone<em>風</em>電話とか。
Androidで動くiPad風タブレットもあった。1500元。なぜかメニューが全部日本語。</p><p>帰りに容量500Gと書いてあるUSBメモリ(Sonyブランド)があったので、
値段を聞いたら100元(約1500円)だとか。
安すぎて、絶対にその容量はなさそうだけど、
話のタネにと思って購入。ねぎったら80元になった(！)。</p><p>ホテルに戻ってPCにつないだら、本当に524Gと表示された。びっくり。
この容量がぜんぶ使えるんだろうか。いろいろ試してみないと。</p><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20100624.html#c\">ツッコミを入れる</a></p>"))) ("上海" "着いた。ホテルにチェックイン。ネットも使える。 でも、アクセスできないサイトがぼろぼろあって泣ける。 Twitterも使えない。 メールは普通に使えるみたい。" "http://www.rubyist.net/~matz/20100624.html#p01" (19490 60935) new 7 nil nil ((link nil "http://www.rubyist.net/~matz/20100624.html#p01") (xhtml:link ((rel . "alternate") (media . "handheld") (type . "text/html") (href . "http://www.rubyist.net/~matz/20100624.html#p01"))) (dc:date nil "2010-06-24T14:32:55+09:00") (title nil "上海") (dc:creator nil "Yukihiro -matz- Matsumoto") (description nil "着いた。ホテルにチェックイン。ネットも使える。 でも、アクセスできないサイトがぼろぼろあって泣ける。 Twitterも使えない。 メールは普通に使えるみたい。") (content:encoded nil "<h3>上海</h3><p>着いた。ホテルにチェックイン。ネットも使える。</p><p>でも、アクセスできないサイトがぼろぼろあって泣ける。
Twitterも使えない。</p><p>メールは普通に使えるみたい。</p><div style=\"text-align: center;\"><script type=\"text/javascript\"></script><script type=\"text/javascript\"
  src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><a href=\"http://www.rubyist.net/~matz/20100624.html#c\">ツッコミを入れる</a></p>"))))