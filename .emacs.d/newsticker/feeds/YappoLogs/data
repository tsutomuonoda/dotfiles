;; -*- coding: utf-8 -*-
(("YappoLogs" "Yappo運営者のメモとか色々<br>
blogって単語は好きぢゃ無いけどスクラッチ代わりに使います。<br>" "http://blog.yappo.jp/yappo/" (20813 17153 917364 180000) feed 0 nil nil ((title nil "YappoLogs") (link nil "http://blog.yappo.jp/yappo/") (description nil "Yappo運営者のメモとか色々<br>
blogって単語は好きぢゃ無いけどスクラッチ代わりに使います。<br>
") (dc:language nil "ja") (dc:creator nil) (dc:date nil "2013-03-13T15:21:13+09:00") (admin:generatorAgent ((rdf:resource . "http://www.movabletype.org/?v=2.661"))) (items nil (rdf:Seq nil (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000812.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000811.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000810.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000809.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000808.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000807.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000806.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000805.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000804.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000803.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000802.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000801.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000800.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000799.html"))) (rdf:li ((rdf:resource . "http://blog.yappo.jp/yappo/archives/000798.html"))))) (atom10:link ((xmlns:atom10 . "http://www.w3.org/2005/Atom") (rel . "self") (type . "application/rdf+xml") (href . "http://feeds.feedburner.com/yappo"))) (feedburner:info ((uri . "yappo"))) (atom10:link ((xmlns:atom10 . "http://www.w3.org/2005/Atom") (rel . "hub") (href . "http://pubsubhubbub.appspot.com/"))) (feedburner:browserFriendly nil "This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site, subject to copyright and fair use."))) ("perlbrew best practice" "perlbrew には $ perlbrew upgrade-perlというのが実装されてるのがあまりにも有名ですが、これは現在使ってる環境の perl を、そのマイナーバージョンの中で一番新しいバージョンにアップグレードしてくれるんです。 perl-5.16.1 を使っていたら perl-5.16.3 に perl-5.14.2 を使っていたら perl-5.14.4 に。という具合ですね。 同じマイナーバージョンの Perl では XS バイナリの互換性とか保証されているので、すでにインストールされているモジュールはそのまま利用できる状態になっています。 だがしかし$ perlbrew install perl-5.16.2して作った環境を upgrade-perl すると 5.16.3 が入ってるのに perl-5.16.2 って名前がついたままでキモい！ 実際には(c)tokuhirom みたいになってて、どのバージョンかわかるんだけど perl-5.16.2 (5.16.3) とかもっときもい！ ってことで、最初に perlbrew 環境をセットアップするときは$ perlbrew install..." "http://feedproxy.google.com/~r/yappo/~3/mGU2xl097xk/000812.html" (20800 6873) new 1 nil nil ((title nil "perlbrew best practice ") (link nil "http://feedproxy.google.com/~r/yappo/~3/mGU2xl097xk/000812.html") (description nil "perlbrew には $ perlbrew upgrade-perlというのが実装されてるのがあまりにも有名ですが、これは現在使ってる環境の perl を、そのマイナーバージョンの中で一番新しいバージョンにアップグレードしてくれるんです。 perl-5.16.1 を使っていたら perl-5.16.3 に perl-5.14.2 を使っていたら perl-5.14.4 に。という具合ですね。 同じマイナーバージョンの Perl では XS バイナリの互換性とか保証されているので、すでにインストールされているモジュールはそのまま利用できる状態になっています。 だがしかし$ perlbrew install perl-5.16.2して作った環境を upgrade-perl すると 5.16.3 が入ってるのに perl-5.16.2 って名前がついたままでキモい！ 実際には(c)tokuhirom みたいになってて、どのバージョンかわかるんだけど perl-5.16.2 (5.16.3) とかもっときもい！ ってことで、最初に perlbrew 環境をセットアップするときは$ perlbrew install...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-03-13T15:21:13+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000812.html"))) ("perlbrew lib" "perlbrew best practice まとめようと思ったら perlbrew lib なるコマンド見つけたので使ってみた。 なんか、一度ビルドした perl binary と元の site_perl を使いまわして、新たに lib path だけ変えて複数の環境を手軽に切り替える事が出来るってやつみたい。 例えば perl-5.17 の環境に @suneo って lib を作ると、 perl-5.17 の通常のライブラリパスに追加されて @suneo のライブラリパスが利用できる。そして cpanm で install するときは @suneo を汚さない。という branch っぽい作業するときに便利そう。 作る $ perlbrew lib create..." "http://feedproxy.google.com/~r/yappo/~3/OTQ5mXpY18U/000811.html" (20800 4397) new 2 nil nil ((title nil "perlbrew lib") (link nil "http://feedproxy.google.com/~r/yappo/~3/OTQ5mXpY18U/000811.html") (description nil "perlbrew best practice まとめようと思ったら perlbrew lib なるコマンド見つけたので使ってみた。 なんか、一度ビルドした perl binary と元の site_perl を使いまわして、新たに lib path だけ変えて複数の環境を手軽に切り替える事が出来るってやつみたい。 例えば perl-5.17 の環境に @suneo って lib を作ると、 perl-5.17 の通常のライブラリパスに追加されて @suneo のライブラリパスが利用できる。そして cpanm で install するときは @suneo を汚さない。という branch っぽい作業するときに便利そう。 作る $ perlbrew lib create...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-03-13T14:39:57+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000811.html"))) ("ikachan が優しくなったよ" "見た目があれだなーと思ってたところに、ひろむせんせいが css をあててくれました！ やったね！ https://metacpan.org/release/YAPPO/App-Ikachan-0.11/..." "http://feedproxy.google.com/~r/yappo/~3/5eA04yZcBcs/000810.html" (20798 45963) new 3 nil nil ((title nil "ikachan が優しくなったよ") (link nil "http://feedproxy.google.com/~r/yappo/~3/5eA04yZcBcs/000810.html") (description nil "見た目があれだなーと思ってたところに、ひろむせんせいが css をあててくれました！ やったね！ https://metacpan.org/release/YAPPO/App-Ikachan-0.11/...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-03-12T13:48:11+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000810.html"))) ("ikachan 新バージョン出したよ" "App::Ikachan 0.10 でました。 3つの新機能が追加です 大量のチャンネルに JOIN した状態で Excess Flood された後にサーバに繋ぎ直して元居たチャンネルに入り直そうとする時に 短期間で JOIN しまくるので、 JOIN だけで Excess Flood されてまたサーバからキックされてしまう無限ループしてしまう酷い状況だったのですが sleep しながら JOIN するように AnySan の方で変えたので、この不具合が解消された予定です。 cpanfile で依存モジュール管理するようになったので、 carton で依存モジュールの管理が可能になりました。 ふしはらかん画伯による、とっても可愛いロゴ画像が搭載されました！ どのようなロゴかは是非アップデートしてお試し下さい！..." "http://feedproxy.google.com/~r/yappo/~3/uN1aUMre6BE/000809.html" (20793 27716) new 4 nil nil ((title nil "ikachan 新バージョン出したよ") (link nil "http://feedproxy.google.com/~r/yappo/~3/uN1aUMre6BE/000809.html") (description nil "App::Ikachan 0.10 でました。 3つの新機能が追加です 大量のチャンネルに JOIN した状態で Excess Flood された後にサーバに繋ぎ直して元居たチャンネルに入り直そうとする時に 短期間で JOIN しまくるので、 JOIN だけで Excess Flood されてまたサーバからキックされてしまう無限ループしてしまう酷い状況だったのですが sleep しながら JOIN するように AnySan の方で変えたので、この不具合が解消された予定です。 cpanfile で依存モジュール管理するようになったので、 carton で依存モジュールの管理が可能になりました。 ふしはらかん画伯による、とっても可愛いロゴ画像が搭載されました！ どのようなロゴかは是非アップデートしてお試し下さい！...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-03-08T13:42:44+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000809.html"))) ("Perl で L10N するのに Locale::Maketext::Extract::Plugin::Xslate っての書いた" "Perl で L10N するにはhttp://blog.64p.org/entry/20110224/1298521852こういうことするんですが、今時はTTなんかつかわない！Xslateだ！ってことで Locale::Maketext::Extract::Plugin::TT 使ってたんですが、いろいろ怪しいのでちゃんとしたの作ったよ！ https://metacpan.org/release/Locale-Maketext-Extract-Plugin-Xslate 他のプラグインとちょっとだけオプション変わっちゃうけど、 start_tag とか変えるのも対応できるし syntax も全部対応できるよ。 Text::Xslate の AST とる internal な API 使ってるけど、 gfx に話して internal 扱いやめてもらうことになったので、安心してご利用いただけます。 非建設的な DIS や FUD が万円している昨今ではございますが、中の人達は非常に建設的ですね。..." "http://feedproxy.google.com/~r/yappo/~3/xUTkonl0pko/000808.html" (20792 21477) new 5 nil nil ((title nil "Perl で L10N するのに Locale::Maketext::Extract::Plugin::Xslate っての書いた") (link nil "http://feedproxy.google.com/~r/yappo/~3/xUTkonl0pko/000808.html") (description nil "Perl で L10N するにはhttp://blog.64p.org/entry/20110224/1298521852こういうことするんですが、今時はTTなんかつかわない！Xslateだ！ってことで Locale::Maketext::Extract::Plugin::TT 使ってたんですが、いろいろ怪しいのでちゃんとしたの作ったよ！ https://metacpan.org/release/Locale-Maketext-Extract-Plugin-Xslate 他のプラグインとちょっとだけオプション変わっちゃうけど、 start_tag とか変えるのも対応できるし syntax も全部対応できるよ。 Text::Xslate の AST とる internal な API 使ってるけど、 gfx に話して internal 扱いやめてもらうことになったので、安心してご利用いただけます。 非建設的な DIS や FUD が万円している昨今ではございますが、中の人達は非常に建設的ですね。...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-03-07T17:46:29+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000808.html"))) ("Carton Conferenceやってきました" "cpanm / carton の新しいバージョンも出たことだし、そろそろみんなの carton の知見を集めましょうってことで Carton Conference を開催して来ました。 当日の模様は動画では無くはやりの podcast で配信します。 Podcast SP1: 2013/03/02 Carton Conference Tokyo 2013 / riywo's Podcast carton 業界の今までとこれからをが見える貴重な音声ですので皆さん、どうぞご利用ください。 僕の死霊はhttp://yappo.github.com/talks/20130227-cartoncon/です。 podcast してくれた riywo さんと、会場提供やら準備をして頂いたLINE(仮)さんと中野人に感謝です。..." "http://feedproxy.google.com/~r/yappo/~3/8mVD54NeC6U/000807.html" (20788 21894) new 6 nil nil ((title nil "Carton Conferenceやってきました") (link nil "http://feedproxy.google.com/~r/yappo/~3/8mVD54NeC6U/000807.html") (description nil "cpanm / carton の新しいバージョンも出たことだし、そろそろみんなの carton の知見を集めましょうってことで Carton Conference を開催して来ました。 当日の模様は動画では無くはやりの podcast で配信します。 Podcast SP1: 2013/03/02 Carton Conference Tokyo 2013 / riywo's Podcast carton 業界の今までとこれからをが見える貴重な音声ですので皆さん、どうぞご利用ください。 僕の死霊はhttp://yappo.github.com/talks/20130227-cartoncon/です。 podcast してくれた riywo さんと、会場提供やら準備をして頂いたLINE(仮)さんと中野人に感謝です。...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-03-04T17:04:22+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000807.html"))) ("Perlの女神降臨！「WiiRemoteハック」で鮮魚を喰らう" "――　Perlの女神さんはブログでPerlのソースコードを公開してますけど、プログラミングはいつ覚えたんですか？ ――　それまではプログラミングは全然経験なし？ ――　WiiRemoteって、マウスを使わないでプレゼン資料を操作するデバイスですよね。ダイエットなんかもできる。 ――　鮮魚を喰らう……鮮魚を。 ――　ところで、なぜ「鮮魚」の研究を始めたんですか？ (中略) ――　Perl女神さんはWebアプリを開発できますし、ハードウェアとの連携も経験している。後はサーバーでも覚えたら完璧なエンジニアですね。 ――　では、すっかりエンジニアのPerl女神さんから、読者のエンジニアに何かメッセージを。 そんなPerl女神さんのインタビュー全編はこちら..." "http://feedproxy.google.com/~r/yappo/~3/-7LFemmMITA/000806.html" (20783 6477) new 7 nil nil ((title nil "Perlの女神降臨！「WiiRemoteハック」で鮮魚を喰らう") (link nil "http://feedproxy.google.com/~r/yappo/~3/-7LFemmMITA/000806.html") (description nil "――　Perlの女神さんはブログでPerlのソースコードを公開してますけど、プログラミングはいつ覚えたんですか？ ――　それまではプログラミングは全然経験なし？ ――　WiiRemoteって、マウスを使わないでプレゼン資料を操作するデバイスですよね。ダイエットなんかもできる。 ――　鮮魚を喰らう……鮮魚を。 ――　ところで、なぜ「鮮魚」の研究を始めたんですか？ (中略) ――　Perl女神さんはWebアプリを開発できますし、ハードウェアとの連携も経験している。後はサーバーでも覚えたら完璧なエンジニアですね。 ――　では、すっかりエンジニアのPerl女神さんから、読者のエンジニアに何かメッセージを。 そんなPerl女神さんのインタビュー全編はこちら...") (dc:subject nil "music") (dc:creator nil "Yappo") (dc:date nil "2013-02-28T17:46:05+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000806.html"))) ("シェル関数でHTTP のステータスコードをすばやくしらべる! そしてメンテナンスフリー！" "一般的な Web Programmer ならば、HTTP Status code はすべて暗記していると聞きました。 しかし、僕は初心者なので、なかなか覚えきれていないので、HTTPのステータスコードをさがすのに便利なシェル関数を用意しました。httpstatus.sh です。.basrc とかに書いとくだけです。 使い方は以下のとおりです。 4xx なコードを列挙する。 $ httpstatus 4 400 Bad Request 401 Unauthorized 402 Payment Required 403 Forbidden 404 Not Found 405 Method Not Allowed 406 Not Acceptable 407 Proxy Authentication Required..." "http://feedproxy.google.com/~r/yappo/~3/dvZUbO01lDM/000805.html" (20773 55874) new 8 nil nil ((title nil "シェル関数でHTTP のステータスコードをすばやくしらべる! そしてメンテナンスフリー！") (link nil "http://feedproxy.google.com/~r/yappo/~3/dvZUbO01lDM/000805.html") (description nil "一般的な Web Programmer ならば、HTTP Status code はすべて暗記していると聞きました。 しかし、僕は初心者なので、なかなか覚えきれていないので、HTTPのステータスコードをさがすのに便利なシェル関数を用意しました。httpstatus.sh です。.basrc とかに書いとくだけです。 使い方は以下のとおりです。 4xx なコードを列挙する。 $ httpstatus 4 400 Bad Request 401 Unauthorized 402 Payment Required 403 Forbidden 404 Not Found 405 Method Not Allowed 406 Not Acceptable 407 Proxy Authentication Required...") (dc:subject nil "music") (dc:creator nil "Yappo") (dc:date nil "2013-02-21T17:26:42+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000805.html"))) ("Try::Lite 「より安全な例外キャッチを簡単に」" "I wrote too safety exception handling module. https://metacpan.org/release/Try-Lite $@ の処理を安全に取り扱う例外処理モジュールとしては Try::Tiny があまりにも有名ですが、別の実装を作ってみました。 アプリケーションを作る時は、よく例外クラスを作ってから die bless {}, $foo_class; みたいな形のオブジェクトの例外を投げて、上流の方で eval で受け取ってから $@ の isa を調べて例外に応じた処理をする事が多いと思います。 ここで問題になるのが、受け取った例外の中から不要な物を、さらに上位に向けて rethrow するわけですが、 rethrow するのを忘れてしまうとクリティカルなバグを発生させる要因となります。 また普通の言語で良くあるような try {} catch (e = IOException) {} catch (e =..." "http://feedproxy.google.com/~r/yappo/~3/-TZlUFAO-So/000804.html" (20769 61230) new 9 nil nil ((title nil "Try::Lite 「より安全な例外キャッチを簡単に」") (link nil "http://feedproxy.google.com/~r/yappo/~3/-TZlUFAO-So/000804.html") (description nil "I wrote too safety exception handling module. https://metacpan.org/release/Try-Lite $@ の処理を安全に取り扱う例外処理モジュールとしては Try::Tiny があまりにも有名ですが、別の実装を作ってみました。 アプリケーションを作る時は、よく例外クラスを作ってから die bless {}, $foo_class; みたいな形のオブジェクトの例外を投げて、上流の方で eval で受け取ってから $@ の isa を調べて例外に応じた処理をする事が多いと思います。 ここで問題になるのが、受け取った例外の中から不要な物を、さらに上位に向けて rethrow するわけですが、 rethrow するのを忘れてしまうとクリティカルなバグを発生させる要因となります。 また普通の言語で良くあるような try {} catch (e = IOException) {} catch (e =...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-02-18T18:06:54+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000804.html"))) ("Log::Dispatch::Screen::Color::Emotional も作ってみた" "ref: http://blog.64p.org/entry/2013/02/15/152508 ref: http://d.hatena.ne.jp/hirose31/20130215/1360908384 変なプラガブル機構になっててめんどいし、最近 Log::Dispatch 使ってなくて自前で log メソッド書いてる。..." "http://feedproxy.google.com/~r/yappo/~3/SHSejiLy9KQ/000803.html" (20765 58246) new 10 nil nil ((title nil "Log::Dispatch::Screen::Color::Emotional も作ってみた") (link nil "http://feedproxy.google.com/~r/yappo/~3/SHSejiLy9KQ/000803.html") (description nil " ref: http://blog.64p.org/entry/2013/02/15/152508 ref: http://d.hatena.ne.jp/hirose31/20130215/1360908384 変なプラガブル機構になっててめんどいし、最近 Log::Dispatch 使ってなくて自前で log メソッド書いてる。...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-02-15T16:28:06+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000803.html"))) ("Exception::Tiny - ちょー簡単な例外処理" "I wrote too easy exception interface module. https://metacpan.org/release/Exception-Tiny 既存の例外処理モジュールは、結構頑張ってるのが多くてドキュメント凄いいっぱいあったり実装が読みにくかったり痒い所がかけないので、おばあちゃんの孫の手的な実装をリリースしました。 例外処理に最低限必要な実装しか無いので使うのが簡単です。 例外クラスにアクセサを生やしたければ、お好きなアクセサーで生やすもよいし、例外の階層構造作りたければ普通に use parent すればいいし、既存の実装を変えたければ user parent 'Exception::Tiny'; で継承された側のモジュールでメソッドを上書きすればいいです。 Exception::Tiny 本体のお約束はなくて、普通に Perl のルールさえ知ってれば好きな例外処理を書けるのでとっても簡単ですね！ 例えば以下のようにテラカンタンに書けます。 use strict; use warnings; use lib 'lib'; use 5.012; package IOException; use parent 'Exception::Tiny'; use Class::Accessor::Lite (..." "http://feedproxy.google.com/~r/yappo/~3/FExfh9QQw-g/000802.html" (20763 4262) new 11 nil nil ((title nil "Exception::Tiny - ちょー簡単な例外処理 ") (link nil "http://feedproxy.google.com/~r/yappo/~3/FExfh9QQw-g/000802.html") (description nil "I wrote too easy exception interface module. https://metacpan.org/release/Exception-Tiny 既存の例外処理モジュールは、結構頑張ってるのが多くてドキュメント凄いいっぱいあったり実装が読みにくかったり痒い所がかけないので、おばあちゃんの孫の手的な実装をリリースしました。 例外処理に最低限必要な実装しか無いので使うのが簡単です。 例外クラスにアクセサを生やしたければ、お好きなアクセサーで生やすもよいし、例外の階層構造作りたければ普通に use parent すればいいし、既存の実装を変えたければ user parent 'Exception::Tiny'; で継承された側のモジュールでメソッドを上書きすればいいです。 Exception::Tiny 本体のお約束はなくて、普通に Perl のルールさえ知ってれば好きな例外処理を書けるのでとっても簡単ですね！ 例えば以下のようにテラカンタンに書けます。 use strict; use warnings; use lib 'lib'; use 5.012; package IOException; use parent 'Exception::Tiny'; use Class::Accessor::Lite (...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-02-13T13:03:50+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000802.html"))) ("「それって何ドーラ？」支度する時間をドーラ換算するプログラム書いた！" "何の役にも立たないプログラムを書いた！ それって何ドーラ？ - 支度する時間をドーラ単位で計算 みんな大好き「天空の城ラピュタ」の海賊ドーラ。 彼女のセリフに 「40秒で支度しな」というのがある。 そこで、1ドーラを40秒とし、30分なら45ドーラ、今から2月1日までなら4279.625ドーラ・・・という具合に、支度する時間をドーラ単位で一発計算できるようにした！ 経緯 @lovecall ごめん、それ何ムスカ分の時間&mdash; boot...さん (@Yappo) 2013年1月27日 ということで、222（2月22日）まで何ドーラなのかを計算したかったのだ。 だって書くって言ったし！征夷大将軍に二言はない!!! 銀ダコハイボール酒場でたこ焼きを焼いててもらってる間、どういうロジック（えらそう！）にすればいいのか考えながら、頭の中でプログラムを組み立ててみた。 したらばなんだかイケそうな気がしたので、早く試したくて我慢できずにたこ焼き待つのを途中で切り上げて帰ってきたｗ たこ焼き職人 「お客さま、まだタコ入れてませんが・・・？」 やぽ公 「ごめんなさい次はちゃんとします本当にごめんなさい！！」 たこ焼き職人 「？？？ （やだこのひとあたまおかしい・・・」 需要まったくないと思うけど、アレだったらどうぞご利用ください(・∀・) 参考文献: ギークなお姉さんは好きですか 「それって何ムスカ？」待ち時間をムスカ換算するプログラム書いた！..." "http://feedproxy.google.com/~r/yappo/~3/yplsECL4hLs/000801.html" (20743 60447) new 12 nil nil ((title nil "「それって何ドーラ？」支度する時間をドーラ換算するプログラム書いた！") (link nil "http://feedproxy.google.com/~r/yappo/~3/yplsECL4hLs/000801.html") (description nil "何の役にも立たないプログラムを書いた！ それって何ドーラ？ - 支度する時間をドーラ単位で計算 みんな大好き「天空の城ラピュタ」の海賊ドーラ。 彼女のセリフに 「40秒で支度しな」というのがある。 そこで、1ドーラを40秒とし、30分なら45ドーラ、今から2月1日までなら4279.625ドーラ・・・という具合に、支度する時間をドーラ単位で一発計算できるようにした！ 経緯 @lovecall ごめん、それ何ムスカ分の時間&mdash; boot...さん (@Yappo) 2013年1月27日 ということで、222（2月22日）まで何ドーラなのかを計算したかったのだ。 だって書くって言ったし！征夷大将軍に二言はない!!! 銀ダコハイボール酒場でたこ焼きを焼いててもらってる間、どういうロジック（えらそう！）にすればいいのか考えながら、頭の中でプログラムを組み立ててみた。 したらばなんだかイケそうな気がしたので、早く試したくて我慢できずにたこ焼き待つのを途中で切り上げて帰ってきたｗ たこ焼き職人 「お客さま、まだタコ入れてませんが・・・？」 やぽ公 「ごめんなさい次はちゃんとします本当にごめんなさい！！」 たこ焼き職人 「？？？ （やだこのひとあたまおかしい・・・」 需要まったくないと思うけど、アレだったらどうぞご利用ください(・∀・) 参考文献: ギークなお姉さんは好きですか 「それって何ムスカ？」待ち時間をムスカ換算するプログラム書いた！...") (dc:subject nil "music") (dc:creator nil "Yappo") (dc:date nil "2013-01-30T00:34:55+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000801.html"))) ("プレイランド に行ってきた！" "いつも窓の下で楽しそうに遊んでる様子を見てて気になってたんですが、オナビルの洋食や行ってきたついでに行ってきた！ 屋上にでるとどーんとプレイランドをもったピエロがプレイランドだと教えてくれます！ 遊戯施設も充実！わんぱくランドにはトランポリンもある！ ヒカリエからの行き方を紹介します。 1. 2Fの通路で東急渋谷駅に向かう 2. 東急の改札の後ろにある東館入り口から入ってコスメコーナーを突っ切る 3. 奥地にあるエレベータに乗る 4. 6F で降りて、ひたすら紳士服コーナーを突っ切って西館へ 5. エスカレータで8Fまで上がる 6. 今度は東館に向かって進む 7. 途中で催事場準備で立ち入り禁止になってるので、そのへんに居る人を捕まえて「プレイランドに行きたいんです！」っていうとプレイランドまで連れてってくれる 8. 上のピエロさんとご対面！ 道中はロンダルギア洞窟並みの難易度で帰り道分からなくなってパニクったりするんで装備は整えて遊びに行くといいです！..." "http://feedproxy.google.com/~r/yappo/~3/jNCBzsBs5sM/000800.html" (20727 39167) new 13 nil nil ((title nil "プレイランド に行ってきた！") (link nil "http://feedproxy.google.com/~r/yappo/~3/jNCBzsBs5sM/000800.html") (description nil "いつも窓の下で楽しそうに遊んでる様子を見てて気になってたんですが、オナビルの洋食や行ってきたついでに行ってきた！ 屋上にでるとどーんとプレイランドをもったピエロがプレイランドだと教えてくれます！ 遊戯施設も充実！わんぱくランドにはトランポリンもある！ ヒカリエからの行き方を紹介します。 1. 2Fの通路で東急渋谷駅に向かう 2. 東急の改札の後ろにある東館入り口から入ってコスメコーナーを突っ切る 3. 奥地にあるエレベータに乗る 4. 6F で降りて、ひたすら紳士服コーナーを突っ切って西館へ 5. エスカレータで8Fまで上がる 6. 今度は東館に向かって進む 7. 途中で催事場準備で立ち入り禁止になってるので、そのへんに居る人を捕まえて「プレイランドに行きたいんです！」っていうとプレイランドまで連れてってくれる 8. 上のピエロさんとご対面！ 道中はロンダルギア洞窟並みの難易度で帰り道分からなくなってパニクったりするんで装備は整えて遊びに行くといいです！...") (dc:subject nil "music") (dc:creator nil "Yappo") (dc:date nil "2013-01-17T15:23:59+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000800.html"))) ("PLACK_ENV my way" "開発用 = development 本番用 = production テスト = test なんで deployment じゃなくて production を使っているかって言うと de(?:ve|p)lo[yp]ment だから..." "http://feedproxy.google.com/~r/yappo/~3/fVsHL8HKWmI/000799.html" (20726 29616) new 14 nil nil ((title nil "PLACK_ENV my way") (link nil "http://feedproxy.google.com/~r/yappo/~3/fVsHL8HKWmI/000799.html") (description nil "開発用 = development 本番用 = production テスト = test なんで deployment じゃなくて production を使っているかって言うと de(?:ve|p)lo[yp]ment だから...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-01-16T18:32:32+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000799.html"))) ("plackp -R したプロセスを終了する時には SIGHUP ではなく SIGTERM を送るべき、もしくは daemontools で plackup -R するのは筋が悪い話" "スレタイ速報だから内容は無いけど、 plackup -R や plackup -r した場合には Plack::Loader::Restarter で fork して親プロセスでファイルシステム監視をして、変更があったら子プロセスで立ち上げた plack を再起動するみたいな事やってるんだけど、この親プロセスに対して SIGTERM を送ると子プロセスの方にも TERM 送ってくれるから良いんだけど、うっかり SIGHUP を送っちゃうと親プロセスだけ死んで子プロセスだけ生き続けるという事になる。 -R, -r は開発用なので基本的にはコマンドラインで plackup 起動した時に使うから問題にはならない。が、うっかり daemontools 配下で plackup -R とかすると、 server starter 使ってるつもりで svc -h とかでうっかり HUP を送ってしまったりするのである。 そうすると plackup のプロセスが..." "http://feedproxy.google.com/~r/yappo/~3/vpwRsvyUXaU/000798.html" (20719 43616) new 15 nil nil ((title nil "plackp -R したプロセスを終了する時には SIGHUP ではなく SIGTERM を送るべき、もしくは daemontools で plackup -R するのは筋が悪い話") (link nil "http://feedproxy.google.com/~r/yappo/~3/vpwRsvyUXaU/000798.html") (description nil "スレタイ速報だから内容は無いけど、 plackup -R や plackup -r した場合には Plack::Loader::Restarter で fork して親プロセスでファイルシステム監視をして、変更があったら子プロセスで立ち上げた plack を再起動するみたいな事やってるんだけど、この親プロセスに対して SIGTERM を送ると子プロセスの方にも TERM 送ってくれるから良いんだけど、うっかり SIGHUP を送っちゃうと親プロセスだけ死んで子プロセスだけ生き続けるという事になる。 -R, -r は開発用なので基本的にはコマンドラインで plackup 起動した時に使うから問題にはならない。が、うっかり daemontools 配下で plackup -R とかすると、 server starter 使ってるつもりで svc -h とかでうっかり HUP を送ってしまったりするのである。 そうすると plackup のプロセスが...") (dc:subject nil "perl") (dc:creator nil "Yappo") (dc:date nil "2013-01-11T15:00:00+09:00") (feedburner:origLink nil "http://blog.yappo.jp/yappo/archives/000798.html"))))