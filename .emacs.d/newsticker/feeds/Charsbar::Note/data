;; -*- coding: utf-8 -*-
(("Charsbar::Note" "Charsbar::Note" "http://d.hatena.ne.jp/charsbar/" (20813 17236 632084 975000) feed 0 nil nil ((title nil "Charsbar::Note") (link nil "http://d.hatena.ne.jp/charsbar/") (description nil "Charsbar::Note") (dc:creator nil "charsbar") (dc:date nil "2013-03-11T12:48:03+09:00") (items nil (rdf:Seq nil (rdf:li ((rdf:resource . "http://d.hatena.ne.jp/charsbar/20130311/1362973682"))) (rdf:li ((rdf:resource . "http://d.hatena.ne.jp/charsbar/20130131/1359567580"))) (rdf:li ((rdf:resource . "http://d.hatena.ne.jp/charsbar/20121121/1353510834"))) (rdf:li ((rdf:resource . "http://d.hatena.ne.jp/charsbar/20121022/1350833837"))) (rdf:li ((rdf:resource . "http://d.hatena.ne.jp/charsbar/20120925/1348513000"))))))) ("Perl QA Hackathon 2013について" "先日半年ぶりくらいで参加したHachioji.pm #26や、3/9に開催されたHokkaido.pm #9でも少しだけ話をしましたが、昨年に引き続き、今年も4月12日から14日にかけて、イギリスのランカスター大学で開催されるPerl品質管理チームのハッカソンに参加してきます。 http://2013.qa-h" "http://d.hatena.ne.jp/charsbar/20130311/1362973682" (20797 21490) new 1 nil nil ((title nil " Perl QA Hackathon 2013について") (link nil "http://d.hatena.ne.jp/charsbar/20130311/1362973682") (description nil " 先日半年ぶりくらいで参加したHachioji.pm #26や、3/9に開催されたHokkaido.pm #9でも少しだけ話をしましたが、昨年に引き続き、今年も4月12日から14日にかけて、イギリスのランカスター大学で開催されるPerl品質管理チームのハッカソンに参加してきます。 http://2013.qa-h") (content:encoded nil "
<div class=\"section\"><p>先日半年ぶりくらいで参加したHachioji.pm #26や、3/9に開催されたHokkaido.pm #9でも少しだけ話をしましたが、昨年に引き続き、今年も4月12日から14日にかけて、イギリスのランカスター大学で開催されるPerl品質管理チームのハッカソンに参加してきます。</p><p><a href=\"http://2013.qa-hackathon.org/qa2013/\" target=\"_blank\">http://2013.qa-hackathon.org/qa2013/</a></p><p>参加申し込みはすでに締め切られていますが、今年も各国から40名近い参加者が集まり、Module::Buildまわりの作業や、.packlistの置き換え、CPAN Testers向けのツールの整備、Test::Harness/Test::Builderの対応などが行われる予定です。また、目新しいところでは「Perl 5の仕様」を定めるテストスイートの構築というテーマがあげられています。将来的には<a href=\"https://github.com/perl6/roast\" target=\"_blank\">Perl 6の公式テストスイート</a>や、<a href=\"http://perl6.org/compilers/features\" target=\"_blank\">Perl 6の仕様と各実装の対応状況</a>のようなものを提供したいとのことで、もちろん今回のハッカソンだけで完結するような話ではありませんが、先般話題になったPumpking Perlの議論ともども、今後さまざまなイベントやメーリングリスト、IRCなどで議論を深めていくためのたたき台になることが期待されます。私自身はもっぱら<a href=\"http://cpants.cpanauthors.org/\" target=\"_blank\">CPANTS</a>で使っている各種ツールのメンテナンスをすることになりそうですが、DBIやDBD::*の共通テストを整備するというお題もあがっているので、DBD::SQLiteのメンテナとしてはそのお手伝いもしたいと思っています。</p><p>例によってイギリス以外に住んでいるハッカーの渡航費やハッカソン公式ホテルの宿泊費についてはいま主催者側の方でさまざまな伝手をつかってスポンサーを募集してくださっていますが、下記予算にある通り、まだ全額カバーできるほどにはなっていないようです。もしスポンサーになってもいいという企業・団体の方がいらっしゃいましたらお知らせください。</p><p><a href=\"http://2013.qa-hackathon.org/qa2013/budget.html\" target=\"_blank\">http://2013.qa-hackathon.org/qa2013/budget.html</a></p><p>また、今年はEnglightened Perl Organization経由で寄付を送ることもできるようになっています。個人スポンサーになってくださる方がいらっしゃいましたら、下記リンクよりEPOのサイトに移動して、適当な額を英ポンド換算でお送りいただければさいわいです。</p><p><a href=\"http://2013.qa-hackathon.org/qa2013/donate.html\" target=\"_blank\">http://2013.qa-hackathon.org/qa2013/donate.html</a></p></div>
") (dc:creator nil "charsbar") (dc:date nil "2013-03-11T12:48:02+09:00"))) ("Ploonga/Groonga::APIというのを書き始めている件" "肉の日のリリースには間に合いませんでしたが、先日からgroongaのPerl/XSバインディングを書き始めています。Perlからgroongaというと、過去にはYappoさんが着手されたXSバインディングや、hide_o_55さんがHachioji.pmで発表されていたApp::Groonga::Wrapper、ダウンロード" "http://d.hatena.ne.jp/charsbar/20130131/1359567580" (20745 23260) new 2 nil nil ((title nil " Ploonga/Groonga::APIというのを書き始めている件") (link nil "http://d.hatena.ne.jp/charsbar/20130131/1359567580") (description nil " 肉の日のリリースには間に合いませんでしたが、先日からgroongaのPerl/XSバインディングを書き始めています。Perlからgroongaというと、過去にはYappoさんが着手されたXSバインディングや、hide_o_55さんがHachioji.pmで発表されていたApp::Groonga::Wrapper、ダウンロード") (content:encoded nil "
<div class=\"section\"><p>肉の日のリリースには間に合いませんでしたが、先日からgroongaのPerl/XSバインディングを書き始めています。Perlからgroongaというと、過去にはYappoさんが着手された<a href=\"https://github.com/yappo/p5-Groonga\" target=\"_blank\">XSバインディング</a>や、hide_o_55さんがHachioji.pmで発表されていた<a href=\"https://github.com/hideo55/p5-App-Groonga-Wrapper\" target=\"_blank\">App::Groonga::Wrapper</a>、ダウンロードたけしさんの<a href=\"http://d.hatena.ne.jp/download_takeshi/20110301/1298911843\" target=\"_blank\">AnyEvent::Groonga</a>、Perl Advent Calendarにも<a href=\"http://perl-users.jp/articles/advent-calendar/2011/casual/4\" target=\"_blank\">記事</a>を書かれたokamuuuさんの<a href=\"https://github.com/okamuuu/Test-Groonga\" target=\"_blank\">Test::Groonga</a>など、カジュアルに使う分にはそれなりにツールも揃っている（というか、groonga自体HTTPを話せるので、groongaコマンドでサーバさえ用意してしまえばあとはFurlなりLWP::UserAgentなりで事足りてしまう）のですが、それだけではかゆいところに手が届かない部分もあるようなので、ちょっと手を出してみた次第。</p><p>いまのところソースはgithubにしかありませんが、ごくカジュアルな使い方はこんな感じ。</p><pre>
use strict;
use warnings;
use Ploonga;

my $ploonga = Ploonga-&#62;new(
  dbfile =&#62; &#39;db/test.db&#39;,
);

$ploonga-&#62;do(&#39;table_create --name Site --flags TABLE_HASH_KEY --key_type ShortText&#39;);
$ploonga-&#62;do(&#39;column_create --table Site --name title --type ShortText&#39;);
$ploonga-&#62;do(&#39;load --table Site&#39;, &#60;&#60;&#39;JSON&#39;);
&#91;
{&#34;_key&#34;:&#34;http://example.org/&#34;,&#34;title&#34;:&#34;This is test record 1!&#34;},
{&#34;_key&#34;:&#34;http://example.net/&#34;,&#34;title&#34;:&#34;test record 2.&#34;},
{&#34;_key&#34;:&#34;http://example.com/&#34;,&#34;title&#34;:&#34;test test record three.&#34;},
{&#34;_key&#34;:&#34;http://example.net/afr&#34;,&#34;title&#34;:&#34;test record four.&#34;},
{&#34;_key&#34;:&#34;http://example.org/aba&#34;,&#34;title&#34;:&#34;test test test record five.&#34;},
{&#34;_key&#34;:&#34;http://example.com/rab&#34;,&#34;title&#34;:&#34;test test test test record six.&#34;},
{&#34;_key&#34;:&#34;http://example.net/atv&#34;,&#34;title&#34;:&#34;test test test record seven.&#34;},
{&#34;_key&#34;:&#34;http://example.org/gat&#34;,&#34;title&#34;:&#34;test test record eight.&#34;},
{&#34;_key&#34;:&#34;http://example.com/vdw&#34;,&#34;title&#34;:&#34;test test record nine.&#34;},
]
JSON

my $ret = $ploonga-&#62;do(&#39;select --table Site --query _id:1&#39;);
</pre><p>groongaには渡した文字列をそのまま解釈してくれる便利なAPIが用意されているので、データベースやホストを指定してインスタンスをつくったら、あとはgroongaコマンドに渡すようにコマンドを渡してやれば、結果を伝えるスカラー、あるいはもっと複雑な構造のデータが返ってきます。Furlなどでリクエストを投げる場合と違って、テストの際に別サーバを上げ下げしたり、文字列のエスケープをあれこれ気にしたりする必要がないのがメリットです。</p><p>もうちょい複雑なことをしたくなった場合は生API(Groonga::API)の方を触ればPure Perlの世界にいながらCを書いている気分を味わえますが、いまの段階ではまだ3割程度のAPIにしか対応できていません。様子がわかってきたらもう少し生っぽくないインタフェースも用意したいとは思っていますが、その辺も今後の課題です。</p><p>開発は（例によって）もっぱらWindows上で行っているのですが、手元のstrawberry perl環境ではオフィシャルのライブラリにリンクするとDBにアクセスする段階で落ちてしまうので、いまのところ自前でビルドしたgroongaを使っています（ほかの環境ではそのような問題にはあたっていません）。</p><blockquote><p>追記：この件はどうやらstrawberry perlないしstrawberry perlに同梱されているMinGW側の問題のようです（ActivePerl 5.16.2とppmで提供されているMinGW64の組み合わせではオフィシャルのgroongaとリンクしても問題が発生しませんでした）。</p></blockquote><p>また、現状動作確認したのはgroonga 2.1.1/2.1.2のみです。多少修正すれば1.x.x系列でも動きそうですが、まだ手をつけていません。</p><p>リポジトリはこちらです。</p><p><a href=\"https://github.com/charsbar/groonga-api\" target=\"_blank\">https://github.com/charsbar/groonga-api</a></p></div>
") (dc:creator nil "charsbar") (dc:date nil "2013-01-31T02:39:40+09:00"))) ("DBD::SQLiteで作成したデータベースがsqlite3コマンドで開けない場合" "以前こちらでも書いた通り、DBD::SQLite 1.37以降ではバンドルしているSQLiteライブラリのデフォルトのファイルフォーマットが変更になったため、「PRAGMA legacy_file_format=ON」を有効にしないと2006年以前のSQLiteでは読めなくなるという問題があるのですが、それとは別" "http://d.hatena.ne.jp/charsbar/20121121/1353510834" (20652 61362) new 3 nil nil ((title nil " DBD::SQLiteで作成したデータベースがsqlite3コマンドで開けない場合") (link nil "http://d.hatena.ne.jp/charsbar/20121121/1353510834") (description nil " 以前こちらでも書いた通り、DBD::SQLite 1.37以降ではバンドルしているSQLiteライブラリのデフォルトのファイルフォーマットが変更になったため、「PRAGMA legacy_file_format=ON」を有効にしないと2006年以前のSQLiteでは読めなくなるという問題があるのですが、それとは別") (content:encoded nil "
<div class=\"section\"><p>以前<a href=\"http://d.hatena.ne.jp/charsbar/20120119/1326981740\" target=\"_blank\">こちら</a>でも書いた通り、DBD::SQLite 1.37以降ではバンドルしているSQLiteライブラリのデフォルトのファイルフォーマットが変更になったため、「PRAGMA legacy_file_format=ON」を有効にしないと2006年以前のSQLiteでは読めなくなるという問題があるのですが、それとは別に、SQLite 3.7以降で新設されたWAL (Write Ahead Logging)という機能を使うと、バージョン3.7より前のsqlite3コマンドでは「file is encrypted or is not a database」などといわれて該当のデータベースが開けなくなります。</p><p>詳細については下記のリンクをご覧いただくとして、データベースを開いたときに-walとか-shmという接尾辞のついたファイルができる場合はこの機能が妨げになっているものと思われますので、最近のDBD::SQLiteを使って「PRAGMA journal_mode = DELETE」を発行して従来のロールバックジャーナルモードに戻すか、sqlite3バイナリの方を最新のものにアップグレードしてください。広報していなかったのであまり使う方もいらっしゃらないかと思っていたのですが、kazeburoさんのGrowthForecastでWALモードが採用されています。</p><ul><li><a href=\"http://sqlite.org/pragma.html#pragma_journal_mode\" target=\"_blank\">http://sqlite.org/pragma.html#pragma_journal_mode</a></li><li><a href=\"http://sqlite.org/wal.html\" target=\"_blank\">http://sqlite.org/wal.html</a></li></ul><p>なお、このモード変更は、ほかの多くのプラグマと違い、データベース接続を切ったあとも有効です。WALモードを検証したあと戻し忘れた場合などにも影響が残りますのでご注意ください。</p></div>
") (dc:creator nil "charsbar") (dc:date nil "2012-11-22T00:13:54+09:00"))) ("Fukuoka Perl Workshop #22" "遅ればせながら、先日開催されたFukuoka Perl Workshop #22に参加してきました。発表資料は以下の通りです。 Analyze CPAN, Analyze Community from charsbar YAPCのLTではとにかく時間がないとのことだったので思い切り端折り（すぎ）ましたが、Fukuoka Perl Workshopの方" "http://d.hatena.ne.jp/charsbar/20121022/1350833837" (20612 5805) new 4 nil nil ((title nil " Fukuoka Perl Workshop #22") (link nil "http://d.hatena.ne.jp/charsbar/20121022/1350833837") (description nil " 遅ればせながら、先日開催されたFukuoka Perl Workshop #22に参加してきました。発表資料は以下の通りです。 Analyze CPAN, Analyze Community from charsbar YAPCのLTではとにかく時間がないとのことだったので思い切り端折り（すぎ）ましたが、Fukuoka Perl Workshopの方") (content:encoded nil "
<div class=\"section\"><p>遅ればせながら、先日開催されたFukuoka Perl Workshop #22に参加してきました。発表資料は以下の通りです。</p><p><iframe src=\"http://www.slideshare.net/slideshow/embed_code/14819608\" width=\"427\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px\" allowfullscreen></iframe><div style=\"margin-bottom:5px\"><strong><a target=\"_blank\" href=\"http://www.slideshare.net/charsbar/fukuokapm22\" title=\"Analyze CPAN, Analyze Community\">Analyze CPAN, Analyze Community</a></strong> from <strong><a target=\"_blank\" href=\"http://www.slideshare.net/charsbar\">charsbar</a></strong></div></p><p>YAPCのLTではとにかく時間がないとのことだったので思い切り端折り（すぎ）ましたが、Fukuoka Perl Workshopの方はタイムテーブルにかなり余裕があるようでしたので、なんでこういう分析をするのかということも含めて都合1時間近く話をさせていただきました。明日からすぐに役立つというたぐいの話ではありませんが、地方でイベントを開催するときなどの参考になればさいわいです。</p><p>なお、発表当日には間に合いませんでしたが、補足資料として、CPAN Authorになった年とアクティブな作者数やリリース数との関係をグラフにして追加しておきました。実のある結論を出せるだけのものではありませんが、なかなか興味深いグラフになっているとは思います。</p><p>また、当日も話しましたが、YAPCからFukuoka.pmの間に9名（その後の1週間でさらに1名）の方が新たにPAUSE IDを申請しています（グラフには反映していません）。typesterさんやytnobodyさんの発表との因果がどの程度認められるかは確認していませんが、いずれにしてもありがたいことですね。</p><p>今回のFukuoka Perl Workshopには大阪から__papix__さんもいらしていました。氏のお話に刺激を受けた方々が、いま、福岡でもPerl入学式のようなものをしようという話をしています。興味がおありの方は<a href=\"http://www.facebook.com/groups/fukuoka.pm/\" target=\"_blank\">Fukuoka.pmのFacebookページ</a>をご覧ください。</p><p>今回は珍しく当日空港から会場に直行するようなスケジュールを組んだこともあって、三次会？までご一緒できなかったのが心残りでしたが、その辺はまたの機会を楽しみにしています（翌日、懇親会に行くときに話題になっていた一蘭本店と、懇親会でお勧めいただいた太宰府には寄ってきました。九州国立博物館はもう一度時間をとってじっくり見学したいと思ったことです）。</p><p>お誘いいただいたd_tsuruさん、会場提供してくださったヌーラボさん、ありがとうございました。</p></div>
") (dc:creator nil "charsbar") (dc:date nil "2012-10-22T00:37:17+09:00"))) ("DBD::SQLite 1.38_01" "細かいことについてはYAPC::Asiaの発表が済んでからまたあらためて記事を書くつもりでいますが、多くの方に関係のありそうな部分だけ先に書いておきます。 デフォルトのトランザクションモードをdeferredからimmediateにしました DBD::SQLite 1.30_02以降、sqlite_use_immed" "http://d.hatena.ne.jp/charsbar/20120925/1348513000" (20576 44264) new 5 nil nil ((title nil " DBD::SQLite 1.38_01") (link nil "http://d.hatena.ne.jp/charsbar/20120925/1348513000") (description nil " 細かいことについてはYAPC::Asiaの発表が済んでからまたあらためて記事を書くつもりでいますが、多くの方に関係のありそうな部分だけ先に書いておきます。 デフォルトのトランザクションモードをdeferredからimmediateにしました DBD::SQLite 1.30_02以降、sqlite_use_immed") (content:encoded nil "
<div class=\"section\"><p>細かいことについてはYAPC::Asiaの発表が済んでからまたあらためて記事を書くつもりでいますが、多くの方に関係のありそうな部分だけ先に書いておきます。</p><h4> デフォルトのトランザクションモードをdeferredからimmediateにしました</h4><p>DBD::SQLite 1.30_02以降、sqlite_use_immediate_transactionというアトリビュートを使えばトランザクションのモードを（デフォルトの）deferredからimmediateに変更できるようにしてありましたが、今回このimmediateの方の挙動をデフォルトとしました。deferredの挙動が必要な方は明示的にsqlite_use_immediate_transactionアトリビュートをfalseにしてください。</p><p>といってもわかりづらいと思うのでもう少し平易に言い換えると、今回の変更で（おもに書き込み用の）トランザクションを開始するべく$dbh-&#62;begin_workを発行したら、<s>きちんとそのタイミングで</s>最初のクエリを発行した時点でデータベースが書き込み用のロックを準備するようになります（SQLite標準のdeferredトランザクションでは読み込みの並列性を高めるため、実際に更新が必要なクエリを発行するまで書き込みロックを取得しません）。</p><p>そのため、deferredトランザクションを前提としてものすごく大きなブロック単位でトランザクションを行っているようなアプリケーションの場合、必要以上のロックが発生して並列読み込みの性能に問題が生じるおそれがあります。</p><p>DBD::SQLiteの用途を考えると、一般的にはロックのタイミングが直感的にもわかりやすくなるメリットや、早い段階で書き込み用のロックを取得するため、（複数のクライアントが読み込みロックを持ったままほぼ同時に書き込みロックを取得しようとして生じる）デッドロックの問題が生じなくなるメリットの方が大きいと判断した結果ですが、組み込み系などで素のSQLiteを使っている方はまた異なる意見を持たれることもあろうかと思います。ご意見ありましたらYAPCの際にでもお知らせいただければ幸いです。</p><h4> バインドパラメータの扱いについて</h4><p>詳細は省略しますが、最近のperlでこんな感じのコードが正しく動いていなかった件が修正されました。</p><pre>
my $sth = $dbh-&#62;prepare(&#34;UPDATE test SET a = ?, b = ? WHERE id = ?&#34;);
my @values = (&#34;hello&#34;,&#34;world&#34;,5);
for (my $i=0;$i&#60;3;$i++) {
  # $sth-&#62;bind_param($i+1, $values&#91;$i]); # work as expected
  $sth-&#62;bind_param($i+1, &#34;$values&#91;$i]&#34;); # this not work!!
}
$sth-&#62;execute();
</pre><p><a href=\"https://rt.cpan.org/Ticket/Display.html?id=79576\" target=\"_blank\">https://rt.cpan.org/Ticket/Display.html?id=79576</a></p><h4> その他</h4><p>ほかにも情報取得系のメソッドをいくつか追加・修正したほか、JAMADAMさんのパッチのおかげで、sqlite_unicodeアトリビュートが真で、カラム名にUTF-8を使っている場合、カラム名も「文字列」としてデコードされるように修正されています。</p><h4> YAPC::Asiaでのセッションについて</h4><p>せっかくDBIの作者とDBD::SQLiteチームが一堂に会するのですから、私自身もどこかで時間を見つけてDBI側の仕様とずれているところのすりあわせをしたり、実装上の問題について助言を求めようと思っていますが、ここをご覧のみなさんのなかで、もし特にDBIやDBD::SQLiteにまつわる話題でTim Bunce氏やAdam Kennedy氏に聞いてみたいことがある方がいるようでしたら、YAPCのセッション中でも、その後の懇親会やら何やらの席ででも、可能な範囲でお手伝いしますのでお声をおかけくださいまし。</p><p>あと、今年は時間の都合などもあって海外勢のスライドの日本語訳はいっさい行っていません（ktatさんなどほかの翻訳好きな方々がどうされたかまでは承知していません）。あしからずご了承ください。</p></div>
") (dc:creator nil "charsbar") (dc:date nil "2012-09-25T03:56:40+09:00"))))